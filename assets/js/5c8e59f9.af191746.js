"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[7063],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>c});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=t.createContext({}),o=function(e){var n=t.useContext(u),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},d=function(e){var n=o(e.components);return t.createElement(u.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=o(a),g=r,c=m["".concat(u,".").concat(g)]||m[g]||p[g]||i;return a?t.createElement(c,l(l({ref:n},d),{},{components:a})):t.createElement(c,l({ref:n},d))}));function c(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=g;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[m]="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=a[o];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},8311:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var t=a(7462),r=(a(7294),a(3905));const i={title:"Musterklausur Programmierung 2",description:"",sidebar_position:20,tags:[]},l=void 0,s={unversionedId:"additional-material/daniel/sample-exam-java2",id:"additional-material/daniel/sample-exam-java2",title:"Musterklausur Programmierung 2",description:"",source:"@site/docs/additional-material/daniel/sample-exam-java2.md",sourceDirName:"additional-material/daniel",slug:"/additional-material/daniel/sample-exam-java2",permalink:"/java-docs/additional-material/daniel/sample-exam-java2",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/additional-material/daniel/sample-exam-java2.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"Musterklausur Programmierung 2",description:"",sidebar_position:20,tags:[]},sidebar:"additionalMaterialSidebar",previous:{title:"Musterklausur Programmierung 1",permalink:"/java-docs/additional-material/daniel/sample-exam-java1"},next:{title:"Cheatsheet Programmierung 1",permalink:"/java-docs/additional-material/daniel/cheatsheet-java1"}},u={},o=[{value:"Hinweise zur Klausur",id:"hinweise-zur-klausur",level:2},{value:"Aufgabe 1 (14 Punkte)",id:"aufgabe-1-14-punkte",level:2},{value:"Klassendiagramm",id:"klassendiagramm",level:3},{value:"Hinweise zur Testklasse SuperLeagueTest",id:"hinweise-zur-testklasse-superleaguetest",level:3},{value:"Musterl\xf6sung",id:"musterl\xf6sung",level:3},{value:"Aufgabe 2 (16 Punkte)",id:"aufgabe-2-16-punkte",level:2},{value:"Klassendiagramm",id:"klassendiagramm-1",level:3},{value:"Hinweise zur Klasse SuperLeague&lt;T extends SuperHuman&gt;",id:"hinweise-zur-klasse-superleaguet-extends-superhuman",level:3},{value:"Musterl\xf6sung",id:"musterl\xf6sung-1",level:3},{value:"Aufgabe 3 (22 Punkte)",id:"aufgabe-3-22-punkte",level:2},{value:"Klassendiagramm",id:"klassendiagramm-2",level:3},{value:"Hinweise zur Klasse SingleQueries",id:"hinweise-zur-klasse-singlequeries",level:3},{value:"Beispielhafte Konsolenausgabe",id:"beispielhafte-konsolenausgabe",level:3},{value:"Musterl\xf6sung",id:"musterl\xf6sung-2",level:3}],d={toc:o},m="wrapper";function p(e){let{components:n,...a}=e;return(0,r.kt)(m,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"hinweise-zur-klausur"},"Hinweise zur Klausur"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Stereotyp ",(0,r.kt)("inlineCode",{parentName:"li"},"<<record>>")," impliziert, dass die Datenklasse einen\nentsprechenden Konstruktor, Getter zu allen Attributen sowie entsprechende\nImplementierungen f\xfcr die Object-Methoden besitzt"),(0,r.kt)("li",{parentName:"ul"},"Der Stereotyp ",(0,r.kt)("inlineCode",{parentName:"li"},"<<enumeration>>")," impliziert, dass die Aufz\xe4hlung einen\npassenden, privaten Konstruktor sowie ggbfs. passende Setter und Getter\nbesitzt"),(0,r.kt)("li",{parentName:"ul"},"Pakete und Klassenimporte m\xfcssen nicht angegeben werden"),(0,r.kt)("li",{parentName:"ul"},"F\xfcr die Konsolenausgabe kann das K\xfcrzel ",(0,r.kt)("em",{parentName:"li"},"sysout")," verwendet werden"),(0,r.kt)("li",{parentName:"ul"},"Methoden- und Attributsbezeichner d\xfcrfen sinnvoll gek\xfcrzt geschrieben werden\n(Beispiel ",(0,r.kt)("em",{parentName:"li"},"testGMPSH()")," statt ",(0,r.kt)("em",{parentName:"li"},"testGetMostPowerfulSuperHuman()"),")")),(0,r.kt)("h2",{id:"aufgabe-1-14-punkte"},"Aufgabe 1 (14 Punkte)"),(0,r.kt)("p",null,"Erstelle die JUnit-5-Testklasse ",(0,r.kt)("inlineCode",{parentName:"p"},"SuperLeagueTest")," anhand des abgebildeten\nKlassendiagramms."),(0,r.kt)("h3",{id:"klassendiagramm"},"Klassendiagramm"),(0,r.kt)("mermaid",{value:"classDiagram\n    SuperHuman <|-- Villain\n    SuperHuman <|-- Hero\n    SuperHuman o-- Universe\n    SuperLeague~T extends SuperHuman~ o-- Universe\n    SuperLeagueTest o-- Hero\n    SuperLeagueTest o-- SuperLeague\n\n    class SuperHuman {\n        <<abstract>>\n        -name String\n        -universe Universe\n        -power int\n        +SuperHuman(name String, universe Universe, power int)\n        +name() String\n        +universe() Universe\n        +power() int\n    }\n\n    class Villain {\n        +Villain(name String, universe Universe, power int)\n    }\n\n    class Hero {\n        +Hero(name String, universe Universe, power int)\n    }\n\n    class Universe {\n        <<enumeration>>\n        MARVEL\n        DC\n    }\n\n    class SuperLeague~T extends SuperHuman~ {\n        <<record>>\n        -name String\n        -universe Universe\n        -members Map~T&#44&#160Boolean~\n        +addSuperHuman(t T) void\n        +getMostPowerfulSuperHuman() Optional~T~\n        +getAllAvailableSuperHumans() List~T~\n        +sendSuperHumanOnMission(t T) void\n    }\n\n    class SuperLeagueTest {\n        -avengers SuperLeague~Hero~\n        -superman Hero\n        -ironman Hero\n        -spiderman Hero\n        +setUp() void\n        +testAddSuperHuman() void\n        +testGetAllAvailableSuperHumans() void\n        +testGetMostPowerfulSuperHuman() void\n    }"}),(0,r.kt)("h3",{id:"hinweise-zur-testklasse-superleaguetest"},"Hinweise zur Testklasse SuperLeagueTest"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Die Lebenszyklus-Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"void setUp()")," soll das nachfolgende Testszenario\naufbauen:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Es soll ein DC-Superheld mit dem Namen ",(0,r.kt)("em",{parentName:"li"},"Superman")," und der St\xe4rke 10 erstellt\nund dem Attribut ",(0,r.kt)("inlineCode",{parentName:"li"},"superman")," zugewiesen werden"),(0,r.kt)("li",{parentName:"ul"},"Es soll ein MARVEL-Superheld mit dem Namen ",(0,r.kt)("em",{parentName:"li"},"Iron Man")," und der St\xe4rke 7\nerstellt und dem Attribut ",(0,r.kt)("inlineCode",{parentName:"li"},"ironman")," zugewiesen werden"),(0,r.kt)("li",{parentName:"ul"},"Es soll ein MARVEL-Superheld mit dem Namen ",(0,r.kt)("em",{parentName:"li"},"Spider-Man")," und der St\xe4rke 8\nerstellt und dem Attribut ",(0,r.kt)("inlineCode",{parentName:"li"},"spiderman")," zugewiesen werden"),(0,r.kt)("li",{parentName:"ul"},"Es soll eine MARVEL-Superheldenliga mit dem Namen ",(0,r.kt)("em",{parentName:"li"},"Avengers")," erstellt und\ndem Attribut ",(0,r.kt)("inlineCode",{parentName:"li"},"avengers")," zugewiesen werden"),(0,r.kt)("li",{parentName:"ul"},"Die Superhelden Iron Man und Spider-Man sollen den Avengers als verf\xfcgbaren\nSuperhelden hinzugef\xfcgt werden. Es muss dabei ber\xfccksichtigt werden, dass\ndie Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"void addSuperHuman(t: T)")," die Ausnahme ",(0,r.kt)("inlineCode",{parentName:"li"},"WrongUniverseException"),"\nausl\xf6sen kann"),(0,r.kt)("li",{parentName:"ul"},"Der Superheld mit dem Namen Spider-Man soll auf eine Mission geschickt\nwerden"))),(0,r.kt)("li",{parentName:"ul"},"Die Testmethode ",(0,r.kt)("inlineCode",{parentName:"li"},"void testAddSuperHuman()")," soll den nachfolgenden Testfall\nabdecken: Beim Aufruf der Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"void addSuperHuman(t: T)")," auf das Attribut\n",(0,r.kt)("inlineCode",{parentName:"li"},"avengers")," mit dem Wert ",(0,r.kt)("inlineCode",{parentName:"li"},"superman")," wird die Ausnahme ",(0,r.kt)("inlineCode",{parentName:"li"},"WrongUniverseException"),"\nerwartet"),(0,r.kt)("li",{parentName:"ul"},"Die Testmethode ",(0,r.kt)("inlineCode",{parentName:"li"},"void testGetAllAvailableSuperHumans()")," soll den nachfolgenden\nTestfall abdecken: Beim Aufruf der Methode\n",(0,r.kt)("inlineCode",{parentName:"li"},"List<T> getAllAvailableSuperHumans()")," auf das Attribut ",(0,r.kt)("inlineCode",{parentName:"li"},"avengers")," wird als\nR\xfcckgabe eine Liste der Gr\xf6\xdfe 1 erwartet"),(0,r.kt)("li",{parentName:"ul"},"Die Testmethode ",(0,r.kt)("inlineCode",{parentName:"li"},"void testGetMostPowerfulSuperHuman()")," soll den nachfolgenden\nTestfall abdecken: Beim Aufruf der Methode\n",(0,r.kt)("inlineCode",{parentName:"li"},"Optional<T> getMostPowerfulSuperHuman()")," auf das Attribut ",(0,r.kt)("inlineCode",{parentName:"li"},"avengers")," wird als\nR\xfcckgabe der Superheld mit dem Namen ",(0,r.kt)("em",{parentName:"li"},"Spider-Man")," als Optional erwartet")),(0,r.kt)("h3",{id:"musterl\xf6sung"},"Musterl\xf6sung"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="SuperLeagueTest.java" showLineNumbers',title:'"SuperLeagueTest.java"',showLineNumbers:!0},'public class SuperLeagueTest { // 0,5\n\n  private SuperLeague<Hero> avengers; // 0,25\n  private Hero superman; // 0,25\n  private Hero ironman; // 0,25\n  private Hero spiderman; // 0,25\n\n  @BeforeEach // 0,25\n  void setUp() throws WrongUniverseException { // 0,75\n    superman = new Hero("Superman", Universe.DC, 10); // 1\n    ironman = new Hero("Iron Man", Universe.MARVEL, 7); // 1\n    spiderman = new Hero("Spider-Man", Universe.MARVEL, 8); // 1\n    avengers = new SuperLeague<>("Avengers", Universe.MARVEL, new HashMap<>()); // 1\n    avengers.addSuperHuman(ironman); // 1\n    avengers.addSuperHuman(spiderman); // 1\n    avengers.sendSuperHumanOnMission(spiderman); // 0,5\n  }\n\n  @Test // 0,25\n  void testAddSuperHuman() { // 0,25\n    assertThrows(WrongUniverseException.class, () -> avengers.addSuperHuman(superman)); // 1\n  }\n\n  @Test // 0,25\n  void testGetAllAvailableSuperHumans() { // 0,25\n    assertEquals(1, avengers.getAllAvailableSuperHumans().size()); // 1\n  }\n\n  @Test // 0,25\n  void testGetMostPowerfulSuperHuman() { // 0,25\n    assertEquals(spiderman, avengers.getMostPowerfulSuperHuman().get()); // 1,5\n  }\n\n}\n')),(0,r.kt)("h2",{id:"aufgabe-2-16-punkte"},"Aufgabe 2 (16 Punkte)"),(0,r.kt)("p",null,"Erstelle die Klasse ",(0,r.kt)("inlineCode",{parentName:"p"},"SuperLeague<T extends SuperHuman>")," anhand des abgebildeten\nKlassendiagrams."),(0,r.kt)("h3",{id:"klassendiagramm-1"},"Klassendiagramm"),(0,r.kt)("mermaid",{value:"classDiagram\n    SuperHuman <|-- Villain\n    SuperHuman <|-- Hero\n    SuperHuman o-- Universe\n    SuperLeague~T extends SuperHuman~ o-- Universe\n\n    class SuperHuman {\n        <<abstract>>\n        -name String\n        -universe Universe\n        -power int\n        +SuperHuman(name String, universe Universe, power int)\n        +name() String\n        +universe() Universe\n        +power() int\n    }\n\n    class Villain {\n        +Villain(name String, universe Universe, power int)\n    }\n\n    class Hero {\n        +Hero(name String, universe Universe, power int)\n    }\n\n    class Universe {\n        <<enumeration>>\n        MARVEL\n        DC\n    }\n\n    class SuperLeague~T extends SuperHuman~ {\n        <<record>>\n        -name String\n        -universe Universe\n        -members Map~T&#44&#160Boolean~\n        +addSuperHuman(t T) void\n        +getMostPowerfulSuperHuman() Optional~T~\n        +getAllAvailableSuperHumans() List~T~\n        +sendSuperHumanOnMission(t T) void\n    }"}),(0,r.kt)("h3",{id:"hinweise-zur-klasse-superleaguet-extends-superhuman"},"Hinweise zur Klasse SuperLeague<T extends SuperHuman",">"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Assoziativspeicher ",(0,r.kt)("inlineCode",{parentName:"li"},"members")," beinhaltet als Schl\xfcssel alle \xdcbermenschen\nder Liga sowie als Wert deren Verf\xfcgbarkeit (verf\xfcgbar: ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", nicht\nverf\xfcgbar: ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"Optional<T> getMostPowerfulSuperHuman()")," soll den st\xe4rksten\n\xdcbermenschen der Liga als Optional zur\xfcckgeben"),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"void addSuperHuman(t: T)")," soll der Liga den eingehenden\n\xdcbermenschen als verf\xfcgbares Mitglied hinzuf\xfcgen. F\xfcr den Fall, dass das\nUniversum des eingehenden \xdcbermenschen nicht dem Universum der Liga\nentspricht, soll die Ausnahme ",(0,r.kt)("inlineCode",{parentName:"li"},"WrongUniverseException")," ausgel\xf6st werden"),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"List<T> getAllAvailableSuperHumans()")," soll alle verf\xfcgbaren\n\xdcbermenschen der Liga als Liste zur\xfcckgeben"),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"void sendSuperHumanOnMission(t: T)")," soll die Verf\xfcgbarkeit des\neingehenden \xdcbermenschen auf nicht verf\xfcgbar setzen")),(0,r.kt)("h3",{id:"musterl\xf6sung-1"},"Musterl\xf6sung"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="SuperLeage.java" showLineNumbers',title:'"SuperLeage.java"',showLineNumbers:!0},"public record SuperLeague<T extends SuperHuman>(String name, Universe universe, HashMap<T, Boolean> members) { // 1\n\n  public Optional<T> getMostPowerfulSuperHuman() { // 0,5\n    T mostPowerfulSuperHuman = null; // 0,5\n    int power = 0; // 0,5\n    for (T t : members.keySet()) { // 1\n      if (t.power() > power) { // 0,5\n        power = t.power(); // 0,5\n        mostPowerfulSuperHuman = t; // 0,5\n      }\n    }\n    return Optional.ofNullable(mostPowerfulSuperHuman); // 1\n  }\n\n  public void addSuperHuman(T t) throws WrongUniverseException { // 1\n    if (!t.universe().equals(universe)) { // 1\n      throw new WrongUniverseException(); // 1\n    }\n\n    members.put(t, true); // 1\n  }\n\n  public List<T> getAllAvailableSuperHumans() { // 0,5\n    List<T> allAvailableSuperHumans = new ArrayList<>(); // 0,5\n    for (Entry<T, Boolean> entry : members.entrySet()) { // 1\n      if (entry.getValue().equals(true)) { // 1\n        allAvailableSuperHumans.add(entry.getKey()); // 1\n      }\n    }\n    return allAvailableSuperHumans; // 0,5\n  }\n\n  public void sendSuperHumanOnMission(T t) { // 0,5\n    members.put(t, false); // 1\n  }\n\n}\n")),(0,r.kt)("h2",{id:"aufgabe-3-22-punkte"},"Aufgabe 3 (22 Punkte)"),(0,r.kt)("p",null,"Erstelle die Klasse ",(0,r.kt)("inlineCode",{parentName:"p"},"SingleQueries")," anhand des abgebildeten Klassendiagramms."),(0,r.kt)("h3",{id:"klassendiagramm-2"},"Klassendiagramm"),(0,r.kt)("mermaid",{value:"classDiagram\n    Single o-- Artist\n    Artist o-- Country\n    SingleQueries o-- Single\n\n    class Single {\n        <<record>>\n        -name String\n        -artist Artist\n        -salesInMillions int\n        -publishingYear String\n    }\n\n    class Artist {\n        <<record>>\n        -name String\n        -country Country\n        -birthdate LocalDate\n        -isAlive boolean\n    }\n\n    class Country {\n        <<enumeration>>\n        BRB\n        CHN\n        FRA\n        GBR\n        ITA\n        PRI\n        USA\n    }\n\n    class SingleQueries {\n        <<record>>\n        -singles List~Single~\n        +printAllSinglesWithMoreThan25MillionSalesPerCountry() void\n        +printAverageBirthYearOfAllDeceasedArtists() void\n        +isAnySingleFromChinaWithMoreThan10MillionSales() boolean\n        +getTop3SinglesOfThisCenturyBySalesInMillions() List~String~\n        +getAllSinglesFromEdSheeran() List~Single~\n    }"}),(0,r.kt)("h3",{id:"hinweise-zur-klasse-singlequeries"},"Hinweise zur Klasse SingleQueries"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Die statische Methode\n",(0,r.kt)("inlineCode",{parentName:"li"},"void printAllSinglesWithMoreThan25MillionSalesPerCountry()")," soll alle\nSingles, die sich mehr als 25 Millionen mal verkauft haben, gruppiert nach dem\nLand in der Form ",(0,r.kt)("em",{parentName:"li"},"[Land","]",": [[Single","]",", [Single","]",",...","]")," ausgeben"),(0,r.kt)("li",{parentName:"ul"},"Die statische Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"void printAverageBirthYearOfAllDeceasedArtists()")," soll\ndas durchschnittliche Geburtsjahr aller verstorbenen K\xfcnstler bzw. aller\nverstorbenen K\xfcnstlerinnen ausgeben. F\xfcr den Fall, dass es keinen verstorbenen\nK\xfcnstler bzw. keine verstorbene K\xfcnstlerin gibt, soll der Wert -1 ausgegeben\nwerden"),(0,r.kt)("li",{parentName:"ul"},"Die statische Methode\n",(0,r.kt)("inlineCode",{parentName:"li"},"boolean isAnySingleFromChinaWithMoreThan10MillionSales()")," soll zur\xfcckgeben,\nob es eine Single eines K\xfcnstlers bzw. einer K\xfcnstlerin aus China gibt,\nwelches sich mehr als 10 Millionen Mal verkauft hat"),(0,r.kt)("li",{parentName:"ul"},"Die statische Methode\n",(0,r.kt)("inlineCode",{parentName:"li"},"List<String> getTop3SinglesOfThisCenturyBySalesInMillions()")," soll die 3 am\nh\xe4ufigsten verkauften Singles des jetzigen Jahrtausends sortiert nach der\nAnzahl Verk\xe4ufe in Millionen in der Form ",(0,r.kt)("em",{parentName:"li"},"[Name der Single","]",": [Name des\nK\xfcnstlers bzw. Name der K\xfcnstlerin","]",", [Verk\xe4ufe in Millionen","]"," Millionen"),"\nzur\xfcckgeben"),(0,r.kt)("li",{parentName:"ul"},"Die statische Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"List<Single> getAllSinglesFromEdSheeran()")," soll alle\nSingles des K\xfcnstlers Ed Sheeran (Land: Gro\xdfbritannien, Geburtstag:\n17.02.1991, Status: lebendig) zur\xfcckgeben")),(0,r.kt)("h3",{id:"beispielhafte-konsolenausgabe"},"Beispielhafte Konsolenausgabe"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"printAllSinglesWithMoreThan25MillionSalesPerCountry:\nCHN: [Single[name=Spotlight, artist=Artist[name=Xiao Zhan, country=CHN, birthdate=1991-10-05,\nisAlive=true], salesInMillion=33, publishingYear=2020],...]\nGBR: [Single[name=Shape of You, artist=Artist[name=Ed Sheeran, country=GBR, birthdate=1991-02-17,\nisAlive=true], salesInMillion=42, publishingYear=2017],...]\n...\n\nprintAverageBirthYearOfAllDeceasedArtists:\n1915.75\n\nisAnySingleFromChinaWithMoreThan10MillionSales:\ntrue\n\ngetTop3SinglesOfThisCenturyBySalesInMillions:\n[Shape of You: Ed Sheeran, 42 Millionen, Despacito: Luis Fonsi, 36 Millionen, Spotlight: Xiao Zhan, 33 Millionen,...]\n\ngetAllSinglesFromEdSheeran:\n[Single[name=Shape of You, artist=Artist[name=Ed Sheeran, country=GBR, birthdate=1991-02-17, isAlive=true], salesInMillions=42, publishingYear=2017], Single[name=Perfect, artist=Artist[name=Ed Sheeran, country=GBR, birthdate=1991-02-17, isAlive=true], salesInMillions=21, publishingYear=2017],...]\n")),(0,r.kt)("h3",{id:"musterl\xf6sung-2"},"Musterl\xf6sung"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="SingleQueries" showLineNumbers',title:'"SingleQueries"',showLineNumbers:!0},'public record SingleQueries(List<Single> singles) { // 1\n\n  private void a() { // 0,5\n    Map<Country, List<Single>> x = singles.stream() // 1\n      .filter(a -> a.salesInMillions() > 25) // 0,5\n      .collect(Collectors.groupingBy(a -> a.artist().country())); // 1\n\n    x.forEach((c, sl) -> System.out.println(c + ": " + sl); // 1\n    }\n  }\n\n  private void b() { // 0,5\n    OptionalDouble x = singles.stream() // 1\n      .map(a -> a.artist()) // 0,5\n      .distinct() // 0,5\n      .filter(a -> !a.isAlive()) // 0,5\n      .mapToInt(a -> a.birthdate().getYear()) // 1\n      .average(); // 0,5\n\n    x.ifPresentOrElse(System.out::println, () -> System.out.println(-1)); // 1\n  }\n\n  private boolean c() { // 0,5\n    return singles.stream() // 1\n      .anyMatch(a -> a.salesInMillions() > 10 // 0,5\n        && a.artist().country().equals(Country.CHN)); // 1\n  }\n\n  private List<String> d() { // 0,5\n    return singles.stream() // 1\n      .filter(a -> a.publishingYear().compareTo("2000") > 0) // 1\n      .sorted((a1, a2) -> Integer.valueOf(a2.salesInMillions()).compareTo(a1.salesInMillions())) // 1\n      .map(a -> a.name() + ": " + a.artist().name() + ", " + a.salesInMillions() + " Millionen") // 1\n      .limit(3) // 0,5\n      .collect(Collectors.toList()); // 0,5\n  }\n\n  private List<Single> e() { // 0,5\n    return singles.stream() // 1\n      .filter(a -> a.artist().equals(new Artist("Ed Sheeran", Country.GBR, LocalDate.of(1991, 2, 17), true))) // 1\n      .collect(Collectors.toList()); // 0,5\n  }\n\n}\n')))}p.isMDXComponent=!0}}]);