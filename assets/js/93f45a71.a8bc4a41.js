"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[5065],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=i.createContext({}),d=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=d(e.components);return i.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(t),m=a,g=c["".concat(o,".").concat(m)]||c[m]||p[m]||r;return t?i.createElement(g,l(l({ref:n},u),{},{components:t})):i.createElement(g,l({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=c;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var d=2;d<r;d++)l[d]=t[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},4991:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=t(7462),a=(t(7294),t(3905));const r={title:"JavaFX-Anwendungen",description:"",sidebar_position:330,tags:[]},l=void 0,s={unversionedId:"documentation/javafx",id:"documentation/javafx",title:"JavaFX-Anwendungen",description:"",source:"@site/docs/documentation/javafx.md",sourceDirName:"documentation",slug:"/documentation/javafx",permalink:"/java-docs/documentation/javafx",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/documentation/javafx.md",tags:[],version:"current",sidebarPosition:330,frontMatter:{title:"JavaFX-Anwendungen",description:"",sidebar_position:330,tags:[]},sidebar:"documentationSidebar",previous:{title:"Komponententests (Unit Tests)",permalink:"/java-docs/documentation/unit-tests"},next:{title:"Datenstr\xf6me (IO-Streams)",permalink:"/java-docs/documentation/io-streams"}},o={},d=[{value:"Aufbau einer JavaFX-Anwendung",id:"aufbau-einer-javafx-anwendung",level:2},{value:"Der Szenegraph",id:"der-szenegraph",level:2},{value:"Lebenszyklus einer JavaFX-Anwendung",id:"lebenszyklus-einer-javafx-anwendung",level:2},{value:"Aufbau einer Szene",id:"aufbau-einer-szene",level:2},{value:"Definition von FXML-Dokumenten",id:"definition-von-fxml-dokumenten",level:2},{value:"Verwenden von FXML-Dokumenten",id:"verwenden-von-fxml-dokumenten",level:2},{value:"Initialisieren einer Szene",id:"initialisieren-einer-szene",level:2},{value:"Ereignisbehandlung",id:"ereignisbehandlung",level:2},{value:"JavaFX Ereignisse",id:"javafx-ereignisse",level:2},{value:"Ereignisbehandlung nach dem MVC-Entwurfsmuster",id:"ereignisbehandlung-nach-dem-mvc-entwurfsmuster",level:2},{value:"Wechsel zwischen Szenen",id:"wechsel-zwischen-szenen",level:2},{value:"Kommunikation zwischen Szenen",id:"kommunikation-zwischen-szenen",level:2}],u={toc:d};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"JavaFX stellt ein Framework zur Entwicklung plattform\xfcbergreifender grafischer Benutzeroberfl\xe4chen dar. Eine grafische Benutzeroberfl\xe4che oder auch ",(0,a.kt)("em",{parentName:"p"},"GUI")," (Graphical User Interface) hat die Aufgabe, Programme mittels grafischer Bildschirmelemente bedienbar zu\nmachen:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Controls wie Eingabefelder, Drucktasten und Ausgabefelder erm\xf6glichen die Interaktion mit der Anwendung"),(0,a.kt)("li",{parentName:"ul"},"Container wie Horizontalboxen und Bereichscontainer erm\xf6glichen die strukturierte Darstellung und Verwaltung anderer Bildschirmelemente:"),(0,a.kt)("li",{parentName:"ul"},"Dialoge wie Nachrichtendialoge und Dateiauswahl-Dialoge stellen vordefinierte Oberfl\xe4chen dar, mit deren Hilfe wiederkehrende Anwendungsf\xe4lle abgedeckt werden k\xf6nnen")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/47243617/209136694-f18f83af-8390-4503-b18c-71c59c3eb3c1.png",alt:"image"})),(0,a.kt)("h2",{id:"aufbau-einer-javafx-anwendung"},"Aufbau einer JavaFX-Anwendung"),(0,a.kt)("p",null,"Eine JavaFX-Anwendung besteht aus einer oder mehreren B\xfchnen (Stages), die beliebig vielen Szenen (Scenes) enthalten k\xf6nnen, wobei jede Szene wiederum beliebig viele Bildschirmelemente (Nodes) enthalten kann:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Die B\xfchne stellt den Rahmen f\xfcr den tats\xe4chlichen Inhalt bereit"),(0,a.kt)("li",{parentName:"ul"},"Eine Szene verwaltet den sogenannten ",(0,a.kt)("em",{parentName:"li"},"Szenegraphen")," der den sichtbaren Teil einer grafischen Benutzeroberfl\xe4che repr\xe4sentiert"),(0,a.kt)("li",{parentName:"ul"},"Ein Bildschirmelement ist Teil des Szenegraphen und kann entweder zur Strukturierung (",(0,a.kt)("em",{parentName:"li"},"Container"),") oder zur Interaktion (",(0,a.kt)("em",{parentName:"li"},"Control"),") genutzt werden")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/47243617/209136757-192b49ef-5547-4c11-bb24-1aec9fe4e895.png",alt:"image"})),(0,a.kt)("h2",{id:"der-szenegraph"},"Der Szenegraph"),(0,a.kt)("p",null,"Der Szenegraph verwaltet die einzelnen Bildschirmelemente einer Szene. Die Elemente eines Graphen werden als Knoten, der Ursprung des Graphen als Wurzel-Knoten\nbezeichnet."),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/47243617/209136774-4d61fc1b-3875-4289-b310-c69c47302f4a.png",alt:"image"})),(0,a.kt)("p",null,"::: note Hinweis\nBeim Szenegraphen ist der Wurzel-Knoten vom Typ ",(0,a.kt)("inlineCode",{parentName:"p"},"Parent"),".\n:::"),(0,a.kt)("h2",{id:"lebenszyklus-einer-javafx-anwendung"},"Lebenszyklus einer JavaFX-Anwendung"),(0,a.kt)("p",null,"JavaFX-Anwendungen sind Unterklassen der Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"Application"),", die die verschiedenen Lebenszyklus-Methoden bereitstellt:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"void launch(args: String[])")," speichert die Parameter, erzeugt ein Objekt der eigenen Klasse und ruft die weiteren Lebenszyklus-Methoden auf"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"void init()")," kann genutzt werden, um z.B. die Aufrufparameter auszulesen"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"void start(primaryStage: Stage)")," bekommt eine B\xfchne \xfcbergeben und wird dazu verwendet, die B\xfchne zu gestalten und die erste Szene aufzurufen"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"void stop()")," wird aufgerufen, bevor der Prozess gestoppt wird und kann genutzt werden, um Aufr\xe4umarbeiten durchzuf\xfchren")),(0,a.kt)("h2",{id:"aufbau-einer-szene"},"Aufbau einer Szene"),(0,a.kt)("p",null,"Der Aufbau einer Szene erfolgt deklarativ mit Hilfe von FXML-Dokumenten. FXML stellt eine auf XML-basierende Sprache dar und erm\xf6glicht eine klare Trennung zwischen Layout und Code:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Die Main-Klasse ruft den FXML-Loader auf"),(0,a.kt)("li",{parentName:"ol"},"Der FXML-Loader \xfcberf\xfchrt das FXML-Dokument in einen Szenegraphen"),(0,a.kt)("li",{parentName:"ol"},"Der FXML-Loader instanziiert den Controller und ruft die (optionale) initialize-Methode auf")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/47243617/209136908-9cf06991-9816-402e-a832-bf4b5682ffe2.png",alt:"image"})),(0,a.kt)("admonition",{title:"Hinweis",type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("em",{parentName:"p"},"XML")," (Extensible Markup Language) stellt eine Auszeichnungssprache zur Beschreibung strukturierter Daten dar.")),(0,a.kt)("h2",{id:"definition-von-fxml-dokumenten"},"Definition von FXML-Dokumenten"),(0,a.kt)("p",null,"Die einzelnen Bildschirmelemente der Szene werden in einem FXML-Dokument als geschachtelte Elemente dargestellt."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="View.fxml" showLineNumbers',title:'"View.fxml"',showLineNumbers:!0},'<?xml version="1.0" encoding="UTF-8"?>\n\n<?import javafx.geometry.Insets?>\n<?import javafx.scene.control.Button?>\n<?import javafx.scene.control.Label?>\n<?import javafx.scene.control.TextField?>\n<?import javafx.scene.layout.VBox?>\n\n<VBox spacing="5.0" xmlns:fx="http://javafx.com/fxml/1">\n  <children>\n    <Button text="Drucktaste" />\n    <Label text="Ausgabefeld" />\n    <TextField promptText="Eingabefeld" />\n  </children>\n  <padding>\n    <Insets bottom="25.0" left="25.0" right="25.0" top="25.0" />\n  </padding>\n</VBox>\n')),(0,a.kt)("h2",{id:"verwenden-von-fxml-dokumenten"},"Verwenden von FXML-Dokumenten"),(0,a.kt)("p",null,"Die statische Methode ",(0,a.kt)("inlineCode",{parentName:"p"},"Parent load(location: URL)")," der Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"FXMLLoader")," \xfcberf\xfchrt das angegebene FXML-Dokument in einen Szenegraphen und gibt den dazugeh\xf6rigen Wurzelknoten vom Typ ",(0,a.kt)("inlineCode",{parentName:"p"},"Parent")," zur\xfcck, mit dessen Hilfe anschlie\xdfend die Szene erstellt werden kann."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MainClass.java" showLineNumbers',title:'"MainClass.java"',showLineNumbers:!0},'public class MainClass extends Application {\n\n  public void start(Stage primaryStage) throws IOException {\n    Parent root = FXMLLoader.load(getClass().getResource("View.fxml"));\n    Scene scene = new Scene(root);\n    primaryStage.setTitle("Aufbau einer Szene");\n    primaryStage.setScene(scene);\n    primaryStage.show();\n  }\n\n}\n')),(0,a.kt)("h2",{id:"initialisieren-einer-szene"},"Initialisieren einer Szene"),(0,a.kt)("p",null,"Die Methode ",(0,a.kt)("inlineCode",{parentName:"p"},"void initialize(location: URL, resources: ResourceBundle)")," der Schnittstelle ",(0,a.kt)("inlineCode",{parentName:"p"},"Initializable")," wird vom FXML-Loader vor Anzeige der dazugeh\xf6rigen Szene aufgerufen und erm\xf6glicht es, die Szene dynamisch anzupassen."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Controller.java" showLineNumbers',title:'"Controller.java"',showLineNumbers:!0},"public class Controller implements Initializable {\n\n  @FXML\n  private Label label;\n\n  public void initialize(URL location, ResourceBundle resources) {\n    Random random = new Random();\n    int randomNumber = random.nextInt(100);\n    label.setText(String.valueOf(randomNumber));\n  }\n\n}\n")),(0,a.kt)("h2",{id:"ereignisbehandlung"},"Ereignisbehandlung"),(0,a.kt)("p",null,"Ereignisse sind Nachrichten, die \xfcber das System weitergeleitet werden. Auf grafischen Benutzeroberfl\xe4chen werden Ereignisse z.B. durch das Bet\xe4tigen einer Drucktaste ausgel\xf6st. In Java wird die Ereignisbehandlung durch das Delegationsmodell festgelegt:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Empf\xe4nger k\xf6nnen sich beim Sender f\xfcr ein Ereignis registrieren"),(0,a.kt)("li",{parentName:"ol"},"Der Sender l\xf6st das Ereignis aus und \xfcbergibt das erzeugte Ereignis-Objekt an alle registrierten Empf\xe4nger"),(0,a.kt)("li",{parentName:"ol"},"Die Empf\xe4nger nehmen das Ereignis-Objekt entgegen und haben dadurch die M\xf6glichkeit, auf das Ereignis zu reagieren")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/47243617/209137051-486a30c8-2887-4276-bd5e-3f8e89b0074c.png",alt:"image"})),(0,a.kt)("h2",{id:"javafx-ereignisse"},"JavaFX Ereignisse"),(0,a.kt)("p",null,"JavaFX stellt verschiedene Ereignisse bereit, die auf unterschiedliche Art und Weise ausgel\xf6st werden:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Ein ",(0,a.kt)("inlineCode",{parentName:"li"},"ActionEvent")," wird bei verschiedenen Interaktionen mit den Controls ausgel\xf6st, z.B. durch das Bet\xe4tigen einer Drucktaste"),(0,a.kt)("li",{parentName:"ul"},"Ein ",(0,a.kt)("inlineCode",{parentName:"li"},"MouseEvent")," wird bei verschiedenen Maus-Aktivit\xe4ten ausgel\xf6st, z.B. durch das Bet\xe4tigen einer Maustaste"),(0,a.kt)("li",{parentName:"ul"},"Ein ",(0,a.kt)("inlineCode",{parentName:"li"},"KeyEvent")," wird durch Tastatureingaben ausgel\xf6st"),(0,a.kt)("li",{parentName:"ul"},"Ein ",(0,a.kt)("inlineCode",{parentName:"li"},"WindowEvent")," wird ausgel\xf6st, wenn sich der Zustand eines Fensters \xe4ndert")),(0,a.kt)("h2",{id:"ereignisbehandlung-nach-dem-mvc-entwurfsmuster"},"Ereignisbehandlung nach dem MVC-Entwurfsmuster"),(0,a.kt)("p",null,"Die Ereignisbehandlung in JavaFX kann nach dem ",(0,a.kt)("a",{parentName:"p",href:"/java-docs/documentation/design/design-patterns"},"MVC-Entwurfsmuster")," umgesetzt werden. Hierbei \xfcbernimmt eine Klasse (Controller) die Ereignisbehandlung f\xfcr ein konkretes FXML-Dokument (View). Im FXML-Dokument wird \xfcber die\nEigenschaft ",(0,a.kt)("inlineCode",{parentName:"p"},"fx:controller")," die verantwortliche Klasse f\xfcr die Ereignisbehandlung festgelegt. Den zu behandelnden Ereignissen kann \xfcber die Eigenschaft ",(0,a.kt)("inlineCode",{parentName:"p"},"onAction")," eine Behandlermethode der Ereignisbehandler-Klasse zugewiesen werden. Um in der\nEreignisbehandler-Klasse auf die jeweiligen Elemente des FXML-Dokuments zugreifen zu k\xf6nnen, m\xfcssen diesen \xfcber die Eigenschaft ",(0,a.kt)("inlineCode",{parentName:"p"},"fx:id")," entsprechende Ids zugewiesen werden."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="View.fxml" showLineNumbers',title:'"View.fxml"',showLineNumbers:!0},'<?xml version="1.0" encoding="UTF-8"?>\n\n<?import javafx.geometry.Insets?>\n<?import javafx.scene.control.Button?>\n<?import javafx.scene.control.TextField?>\n<?import javafx.scene.layout.VBox?>\n\n<VBox spacing="5.0" xmlns:fx="http://javafx.com/fxml/1" fx:controller="Controller">\n  <children>\n    <TextField fx:id="inputTextField" promptText="Eingabe" />\n    <Button text="Eingabe ausgeben" onAction="printInput"/>\n  </children>\n  <padding>\n    <Insets bottom="25.0" left="25.0" right="25.0" top="25.0" />\n  </padding>\n</VBox>\n')),(0,a.kt)("p",null,"In der Ereignisbehandler-Klasse werden die Behandlermethoden implementiert. Diese m\xfcssen zwingend den Parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"ActionEvent")," besitzen, mit dessen Hilfe auf das ausgel\xf6ste Ereignis zugegriffen werden kann. Das Verkn\xfcpfen von Attributen der\nEreignisbehandler-Klasse mit den Elementen des FXML-Dokuments erfolgt \xfcber die Annotation ",(0,a.kt)("inlineCode",{parentName:"p"},"@FXML")," und der Namensgleichheit zwischen dem Attribut der Ereignisbehandler-Klasse und dem Wert der Eigenschaft ",(0,a.kt)("inlineCode",{parentName:"p"},"fx:id")," des entsprechenden Elements des FXML-Dokuments."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Controller.java" showLineNumbers',title:'"Controller.java"',showLineNumbers:!0},"public class Controller {\n\n  @FXML\n  private TextField inputTextField;\n\n  public void printInput(ActionEvent actionEvent) {\n    String input = inputTextField.getText();\n    System.out.println(input);\n  }\n\n}\n")),(0,a.kt)("h2",{id:"wechsel-zwischen-szenen"},"Wechsel zwischen Szenen"),(0,a.kt)("p",null,"Der Wechsel von Szenen erfolgt \xfcber die Methode ",(0,a.kt)("inlineCode",{parentName:"p"},"void setScene(value: Scene)")," der Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"Window"),". Die Methode ",(0,a.kt)("inlineCode",{parentName:"p"},"Object getSource()")," der Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"ActionEvent")," gibt das Bildschirmelement zur\xfcck, welches das Ereignis ausgel\xf6st hat; die Methode ",(0,a.kt)("inlineCode",{parentName:"p"},"Window getWindow()")," der\nKlasse ",(0,a.kt)("inlineCode",{parentName:"p"},"Scene")," die B\xfchne, auf der die aktuelle Szene aufgef\xfchrt wird."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Controller.java" showLineNumbers',title:'"Controller.java"',showLineNumbers:!0},'public class Controller {\n\n  public void goToOutput(ActionEvent actionEvent) throws IOException {\n    Parent root = FXMLLoader.load(getClass().getResource("View.fxml"));\n    Scene scene = new Scene(root);\n    Node node = (Node) actionEvent.getSource();\n    Stage stage = (Stage) node.getScene().getWindow();\n    stage.setScene(scene);\n    stage.show();\n  }\n\n}\n')),(0,a.kt)("h2",{id:"kommunikation-zwischen-szenen"},"Kommunikation zwischen Szenen"),(0,a.kt)("p",null,"Da die verschiedenen Ereignisbehandler-Klassen in einer JavaFX-Anwendung nur lose miteiander gekoppelt sind, wird zur Kommunikation zwischen Szenen eine eindeutige Model-Klasse ben\xf6tigt. Dies kann \xfcber das\n",(0,a.kt)("a",{parentName:"p",href:"/java-docs/documentation/design/design-patterns"},"Einzelst\xfcck-Entwurfsmuster (Singleton-Pattern)")," erreicht werden."),(0,a.kt)("p",null,"Die Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"Model")," umfasst neben der Einzelst\xfcck-Implementierung das Attribut ",(0,a.kt)("inlineCode",{parentName:"p"},"input")," sowie die dazugeh\xf6rige set- und get-Methode."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Model.java" showLineNumbers',title:'"Model.java"',showLineNumbers:!0},"public class Model {\n\n  private static Model instance;\n  private String input;\n\n  private Model() {}\n\n  public static Model getInstance() {\n    if (instance == null) {\n      instance = new Model();\n    }\n    return instance;\n  }\n\n  public void setInput(String input) {\n    this.input = input;\n  }\n\n  public String getInput() {\n    return input;\n  }\n\n}\n")),(0,a.kt)("p",null,"In der Methode ",(0,a.kt)("inlineCode",{parentName:"p"},"void initialize(location: URL, resources: ResourceBundle)")," der Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"InputController")," wird das Attribut ",(0,a.kt)("inlineCode",{parentName:"p"},"model")," initialisiert; in der Methode ",(0,a.kt)("inlineCode",{parentName:"p"},"void goToOutput(actionEvent: ActionEvent)")," wird zun\xe4chst die Eingabe in der Model-Klasse gespeichert und anschlie\xdfend zur View ",(0,a.kt)("inlineCode",{parentName:"p"},"Output"),"\ngewechselt."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="InputController.java" showLineNumbers',title:'"InputController.java"',showLineNumbers:!0},'public class InputController implements Initializable {\n\n  @FXML\n  private TextField inputTextField;\n\n  private Model model;\n\n  public void initialize(URL location, ResourceBundle resources) {\n    model = Model.getInstance();\n  }\n\n  public void goToOutput(ActionEvent actionEvent) throws IOException {\n    String input = inputTextField.getText();\n    model.setInput(input);\n\n    Parent root = FXMLLoader.load(getClass().getResource("OutputView.fxml"));\n    Scene scene = new Scene(root);\n    Node node = (Node) actionEvent.getSource();\n    Stage stage = (Stage) node.getScene().getWindow();\n    stage.setScene(scene);\n    stage.show();\n  }\n\n}\n')),(0,a.kt)("p",null,"In der Methode ",(0,a.kt)("inlineCode",{parentName:"p"},"void initialize(location: URL, resources: ResourceBundle)")," der Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"OuputController")," wird zun\xe4chst das Attribut ",(0,a.kt)("inlineCode",{parentName:"p"},"model")," initialisiert, anschlie\xdfend die Eingabe aus dem Model ausgelesen und abschlie\xdfend die Eingabe dem Ausgabefeld zugewiesen."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="OutputController.java" showLineNumbers',title:'"OutputController.java"',showLineNumbers:!0},"public class OutputController implements Initializable {\n\n  @FXML\n  private Label inputLabel;\n\n  private Model model;\n\n  public void initialize(URL location, ResourceBundle resources) {\n    model = Model.getInstance();\n    String input = model.getInput();\n    inputLabel.setText(input);\n  }\n\n}\n")))}p.isMDXComponent=!0}}]);