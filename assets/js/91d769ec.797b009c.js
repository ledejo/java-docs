"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[5864],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=i.createContext({}),c=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,f=p["".concat(o,".").concat(m)]||p[m]||d[m]||a;return t?i.createElement(f,l(l({ref:n},u),{},{components:t})):i.createElement(f,l({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<a;c++)l[c]=t[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2961:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=t(7462),r=(t(7294),t(3905));const a={title:"Schleifen",description:"",sidebar_position:20,tags:["control-structures","loops"]},l=void 0,s={unversionedId:"documentation/control-structures/loops",id:"documentation/control-structures/loops",title:"Schleifen",description:"",source:"@site/docs/documentation/control-structures/loops.md",sourceDirName:"documentation/control-structures",slug:"/documentation/control-structures/loops",permalink:"/java-docs/documentation/control-structures/loops",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/documentation/control-structures/loops.md",tags:[{label:"control-structures",permalink:"/java-docs/tags/control-structures"},{label:"loops",permalink:"/java-docs/tags/loops"}],version:"current",sidebarPosition:20,frontMatter:{title:"Schleifen",description:"",sidebar_position:20,tags:["control-structures","loops"]},sidebar:"documentationSidebar",previous:{title:"Verzweigungen",permalink:"/java-docs/documentation/control-structures/cases"},next:{title:"Felder (Arrays)",permalink:"/java-docs/documentation/arrays"}},o={},c=[{value:"while-Schleifen",id:"while-schleifen",level:2},{value:"do/while-Schleifen",id:"dowhile-schleifen",level:2},{value:"for-Schleifen",id:"for-schleifen",level:2},{value:"for-each-Schleifen",id:"for-each-schleifen",level:2},{value:"Schleifensteuerung",id:"schleifensteuerung",level:2}],u={toc:c};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Schleifen sind eine von zwei M\xf6glichkeiten, Anweisungsbl\xf6cke wiederholt auszuf\xfchren. Die zweite M\xf6glichkeit sind Selbstaufrufe in Form rekursiver Methoden."),(0,r.kt)("h2",{id:"while-schleifen"},"while-Schleifen"),(0,r.kt)("p",null,"Bei der while-Schleife wird eine bestimmte Anweisungsfolge (",(0,r.kt)("em",{parentName:"p"},"Schleifenrumpf"),") wiederholt, solange eine bestimmte Bedingung (",(0,r.kt)("em",{parentName:"p"},"Schleifenbedingung"),") wahr ist. Da zu Beginn der Schleife die Bedingung gepr\xfcft wird, spricht man auch von einer ",(0,r.kt)("em",{parentName:"p"},"kopfgesteuerten Schleife"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MainClass.java" showLineNumbers',title:'"MainClass.java"',showLineNumbers:!0},"public class MainClass {\n\n  public static void main(String[] args) {\n    int i = 0;\n    while (i < 10) {\n      System.out.println(i);\n      i++;\n    }\n  }\n\n}\n")),(0,r.kt)("h2",{id:"dowhile-schleifen"},"do/while-Schleifen"),(0,r.kt)("p",null,"Im Gegensatz zur while-Schleife wird bei der do/while-Schleife der Schleifenrumpf immer mindestens einmal durchlaufen. Da die Bedingung hier am Ende der Schleife gepr\xfcft wird, spricht man hier von einer ",(0,r.kt)("em",{parentName:"p"},"fu\xdfgesteuerten Schleife"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MainClass.java" showLineNumbers',title:'"MainClass.java"',showLineNumbers:!0},"public class MainClass {\n\n  public static void main(String[] args) {\n    int i = 0;\n    do {\n      System.out.println(i);\n      i++;\n    } while (i < 10);\n  }\n\n}\n")),(0,r.kt)("h2",{id:"for-schleifen"},"for-Schleifen"),(0,r.kt)("p",null,"Bei der for-Schleife handelt es sich um eine indexgesteuerte Schleife, auch ",(0,r.kt)("em",{parentName:"p"},"Z\xe4hlschleife")," genannt. Durch den Index wird bereits zu Schleifenbeginn festgelegt, wie oft die Schleife durchlaufen wird."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MainClass.java" showLineNumbers',title:'"MainClass.java"',showLineNumbers:!0},"public class MainClass {\n\n  public static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n      System.out.println(i);\n    }\n  }\n\n}\n")),(0,r.kt)("h2",{id:"for-each-schleifen"},"for-each-Schleifen"),(0,r.kt)("p",null,"Mit Hilfe der for-each-Schleife k\xf6nnen Datensammlungen wie z.B. ",(0,r.kt)("a",{parentName:"p",href:"/java-docs/documentation/arrays"},"Felder")," und ",(0,r.kt)("a",{parentName:"p",href:"/java-docs/documentation/lists"},"Listen")," elementweise durchlaufen werden. Allerdings k\xf6nnen die Elemente einer Datensammlung nur ge\xe4ndert werden, nicht jedoch die\nDatensammlung selbst."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MainClass.java" showLineNumbers',title:'"MainClass.java"',showLineNumbers:!0},"public class MainClass {\n\n  public static void main(String[] args) {\n    int[] ids = {4, 8, 15, 16, 23, 42};\n    for (int i : ids) {\n      System.out.println(i);\n    }\n  }\n\n}\n")),(0,r.kt)("h2",{id:"schleifensteuerung"},"Schleifensteuerung"),(0,r.kt)("p",null,"Die Anweisung ",(0,r.kt)("inlineCode",{parentName:"p"},"break")," sorgt daf\xfcr, dass eine Schleife ungeachtet der Bedingung komplett verlassen wird. Mit der Anweisung ",(0,r.kt)("inlineCode",{parentName:"p"},"continue")," wird der aktuelle Schleifendurchgang abgebrochen und die Schleife wird mit dem n\xe4chsten Durchlauf fortgef\xfchrt."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MainClass.java" showLineNumbers',title:'"MainClass.java"',showLineNumbers:!0},"public class MainClass {\n\n  public static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n      if (i == 6) {\n        break;\n      }\n      if (i % 2 == 0) {\n        continue;\n      }\n      System.out.println(i);\n    }\n  }\n\n}\n")))}d.isMDXComponent=!0}}]);