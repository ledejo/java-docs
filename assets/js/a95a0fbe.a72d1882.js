"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[9347],{5162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),r=n(4334);const l={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,s),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(7462),r=n(7294),l=n(4334),s=n(2466),i=n(6775),u=n(1980),d=n(7392),o=n(12);function c(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=m(e),[s,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[u,d]=b({queryString:n,groupId:a}),[c,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,o.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),h=(()=>{const e=u??c;return p({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),d(e),f(e)}),[d,f,l]),tabValues:l}}var h=n(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:i,selectValue:u,tabValues:d}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),m=e=>{const t=e.currentTarget,n=o.indexOf(t),a=d[n].value;a!==i&&(c(t),u(a))},p=e=>{var t;let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},d.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>o.push(e),onKeyDown:p,onClick:m},s,{className:(0,l.Z)("tabs__item",g.tabItem,null==s?void 0:s.className,{"tabs__item--active":i===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function S(e){const t=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",g.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(k,(0,a.Z)({},e,t)))}function w(e){const t=(0,h.Z)();return r.createElement(S,(0,a.Z)({key:String(t)},e))}},7833:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(7294),r=n(4866),l=n(5162),s=n(9960),i=n(614);function u(e){let{pullRequest:t,branchSuffix:n}=e;return a.createElement(r.Z,null,a.createElement(l.Z,{value:"exercise",label:"Exercise",default:!0},a.createElement(i.Z,{language:"console"},`git switch exercises/${n}`),a.createElement(s.Z,{to:`https://gitpod.io/#https://github.com/jappuccini/java-exercises/blob/exercises/${n}/Exercise.java`},a.createElement("img",{alt:"Open in Gitpod",src:"https://gitpod.io/button/open-in-gitpod.svg"}))),a.createElement(l.Z,{value:"solution",label:"Solution"},a.createElement(i.Z,{language:"console"},`git switch solutions/${n}`),a.createElement(s.Z,{to:`https://gitpod.io/#https://github.com/jappuccini/java-exercises/blob/solutions/${n}/Exercise.java`},a.createElement("img",{alt:"Open in Gitpod",src:"https://gitpod.io/button/open-in-gitpod.svg"}))),a.createElement(l.Z,{value:"pullrequest",label:"Pull Request"},"Alle \xa0\xc4nderungen zwischen der Aufgabe und der L\xf6sung findest du im Pull Request"," ",a.createElement(s.Z,{to:`https://github.com/jappuccini/java-exercises/pull/${t}/files?diff=split`},"PR#",t)))}},9729:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>u,toc:()=>o});var a=n(7462),r=(n(7294),n(3905)),l=n(7833);const s={title:"Lambdas02",description:""},i=void 0,u={unversionedId:"exercises/lambdas/lambdas02",id:"exercises/lambdas/lambdas02",title:"Lambdas02",description:"",source:"@site/docs/exercises/lambdas/lambdas02.md",sourceDirName:"exercises/lambdas",slug:"/exercises/lambdas/lambdas02",permalink:"/java-docs/exercises/lambdas/lambdas02",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/exercises/lambdas/lambdas02.md",tags:[],version:"current",frontMatter:{title:"Lambdas02",description:""},sidebar:"exercisesSidebar",previous:{title:"Lambdas01",permalink:"/java-docs/exercises/lambdas/lambdas01"},next:{title:"Lambdas03",permalink:"/java-docs/exercises/lambdas/lambdas03"}},d={},o=[{value:"Klassendiagramm",id:"klassendiagramm",level:2},{value:"Hinweise zur Klasse FilteredStudents",id:"hinweise-zur-klasse-filteredstudents",level:2}],c={toc:o},m="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Gegeben sind die beiden Klassen ",(0,r.kt)("inlineCode",{parentName:"p"},"FilteredAdultStudents")," und ",(0,r.kt)("inlineCode",{parentName:"p"},"FilteredTeenStudents"),". Beide sollen sicherstellen, dass nur bestimmte Objekte hinzugef\xfcgt werden k\xf6nnen. Die Klasse ",(0,r.kt)("inlineCode",{parentName:"p"},"FilteredAdultStudents")," erm\xf6glicht nur das Hinzuf\xfcgen von Studenten, die mindesten 18 Jahre alt sind; die Klasse ",(0,r.kt)("inlineCode",{parentName:"p"},"FilteredTeenStudents")," das Hinzuf\xfcgen von Studenten unter 18 Jahren. In der Klasse ",(0,r.kt)("inlineCode",{parentName:"p"},"Exercise")," wird ein erwachsener Student sowie ein jugendlicher Student erzeugt. Die Studenten werden den beiden FilteredStudents-Klassen hinzugef\xfcgt und anschlie\xdfend ausgegeben. Dieser Ansatz funktioniert zwar, ist allerdings nicht flexibel."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Erstelle die Klasse ",(0,r.kt)("inlineCode",{parentName:"li"},"FilteredStudents")," anhand des abgebildeten Klassendiagramms"),(0,r.kt)("li",{parentName:"ul"},"L\xf6sche die Klassen ",(0,r.kt)("inlineCode",{parentName:"li"},"FilteredTeenStudents")," und ",(0,r.kt)("inlineCode",{parentName:"li"},"FilteredAdultStudents")),(0,r.kt)("li",{parentName:"ul"},"Passe die Klasse ",(0,r.kt)("inlineCode",{parentName:"li"},"Exercise")," so an, dass nur noch die Klasse ",(0,r.kt)("inlineCode",{parentName:"li"},"FilteredStudents")," verwendet wird und \xfcbergib dem Konstruktor das Pr\xe4dikat jeweils in Form eines Lambda-Ausdrucks")),(0,r.kt)("h2",{id:"klassendiagramm"},"Klassendiagramm"),(0,r.kt)("mermaid",{value:"classDiagram\n    class FilteredStudents {\n        -students ArrayList~Student~\n        -mandatoryFilter Predicate~Student~\n        +FilteredStudents(mandatoryFilter Predicate~Student~)\n        +add(student Student) void\n        +printStudents() void\n    }"}),(0,r.kt)("h2",{id:"hinweise-zur-klasse-filteredstudents"},"Hinweise zur Klasse FilteredStudents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren"),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"void add(student Student)")," soll der Studentenliste den eingehenden Studenten hinzuf\xfcgen. Vor dem Hinzuf\xfcgen soll mit Hilfe des Filters \xfcberpr\xfcft werden, ob der eingehende Student hinzugef\xfcgt werden soll"),(0,r.kt)("li",{parentName:"ul"},"Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"void printStudent()")," soll alle Studenten auf der Konsole ausgeben")),(0,r.kt)(l.Z,{pullRequest:"68",branchSuffix:"lambdas/02",mdxType:"Exercise"}))}p.isMDXComponent=!0}}]);