"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[5511],{5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),r=a(4334);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,l),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>w});var n=a(7462),r=a(7294),i=a(4334),l=a(2466),s=a(6775),u=a(1980),o=a(7392),c=a(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function m(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,o.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function p(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:a}=e;const n=(0,s.k6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,u._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(n.location.search);t.set(i,e),n.replace({...n.location,search:t.toString()})}),[i,n])]}function g(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,i=m(e),[l,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[u,o]=b({queryString:a,groupId:n}),[d,g]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,i]=(0,c.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:n}),h=(()=>{const e=u??d;return p({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),o(e),g(e)}),[o,g,i]),tabValues:i}}var h=a(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:a,selectedValue:s,selectValue:u,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),m=e=>{const t=e.currentTarget,a=c.indexOf(t),n=o[a].value;n!==s&&(d(t),u(n))},p=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;t=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;t=c[a]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},t)},o.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:p,onClick:m},l,{className:(0,i.Z)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":s===t})}),a??t)})))}function k(e){let{lazy:t,children:a,selectedValue:n}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function C(e){const t=g(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",f.tabList)},r.createElement(v,(0,n.Z)({},e,t)),r.createElement(k,(0,n.Z)({},e,t)))}function w(e){const t=(0,h.Z)();return r.createElement(C,(0,n.Z)({key:String(t)},e))}},7833:(e,t,a)=>{a.d(t,{Z:()=>u});var n=a(7294),r=a(4866),i=a(5162),l=a(9960),s=a(614);function u(e){let{pullRequest:t,branchSuffix:a}=e;return n.createElement(r.Z,null,n.createElement(i.Z,{value:"exercise",label:"Exercise",default:!0},n.createElement(s.Z,{language:"console"},`git switch exercises/${a}`),n.createElement(l.Z,{to:`https://gitpod.io/#https://github.com/jappuccini/java-exercises/blob/exercises/${a}/Exercise.java`},n.createElement("img",{alt:"Open in Gitpod",src:"https://gitpod.io/button/open-in-gitpod.svg"}))),n.createElement(i.Z,{value:"solution",label:"Solution"},n.createElement(s.Z,{language:"console"},`git switch solutions/${a}`),n.createElement(l.Z,{to:`https://gitpod.io/#https://github.com/jappuccini/java-exercises/blob/solutions/${a}/Exercise.java`},n.createElement("img",{alt:"Open in Gitpod",src:"https://gitpod.io/button/open-in-gitpod.svg"}))),n.createElement(i.Z,{value:"pullrequest",label:"Pull Request"},"Alle \xa0\xc4nderungen zwischen der Aufgabe und der L\xf6sung findest du im Pull Request"," ",n.createElement(l.Z,{to:`https://github.com/jappuccini/java-exercises/pull/${t}/files?diff=split`},"PR#",t)))}},6266:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var n=a(7462),r=(a(7294),a(3905)),i=a(7833);const l={title:"ClassDiagrams03",description:""},s=void 0,u={unversionedId:"exercises/uml/class-diagrams03",id:"exercises/uml/class-diagrams03",title:"ClassDiagrams03",description:"",source:"@site/docs/exercises/uml/class-diagrams03.md",sourceDirName:"exercises/uml",slug:"/exercises/uml/class-diagrams03",permalink:"/java-docs/exercises/uml/class-diagrams03",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/exercises/uml/class-diagrams03.md",tags:[],version:"current",frontMatter:{title:"ClassDiagrams03",description:""},sidebar:"exercisesSidebar",previous:{title:"ClassDiagrams02",permalink:"/java-docs/exercises/uml/class-diagrams02"},next:{title:"ClassDiagrams04",permalink:"/java-docs/exercises/uml/class-diagrams04"}},o={},c=[{value:"Klassendiagramm",id:"klassendiagramm",level:2},{value:"Hinweise zur Klasse Creature",id:"hinweise-zur-klasse-creature",level:2},{value:"Hinweise zur Klasse CreatureGame",id:"hinweise-zur-klasse-creaturegame",level:2},{value:"Konsolenausgabe",id:"konsolenausgabe",level:2}],d={toc:c},m="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Passe die Klasse ",(0,r.kt)("inlineCode",{parentName:"li"},"Creature")," aus \xdcbungsaufgabe ",(0,r.kt)("a",{parentName:"li",href:"/java-docs/exercises/oo/oo06"},"OO06")," anhand\ndes abgebildeten Klassendiagramms an und Erstelle die Klasse ",(0,r.kt)("inlineCode",{parentName:"li"},"CreatureGame")),(0,r.kt)("li",{parentName:"ul"},"Erstelle eine ausf\xfchrbare Klasse, welche einen Kampf zwischen zwei Kreaturen\nsimuliert")),(0,r.kt)("h2",{id:"klassendiagramm"},"Klassendiagramm"),(0,r.kt)("mermaid",{value:"classDiagram\n    CreatureGame o-- Creature\n\n    class CreatureGame {\n        -creature1 Creature\n        -creature2 Creature\n        -numberOfRounds int\n        +Game(creature1 Creature, creature2 Creature)\n        +simulateFight() void\n        -move(creature1 Creature, creature2 Creature) boolean\n        -print() void\n    }\n\n    class Creature {\n        -name String\n        -attackValue int\n        -hitpoints int\n        +Creature(name String, attackValue int, hitpoints int)\n        +attackCreature(creature Creature) boolean\n        +getName() String\n        +getAttackValue() int\n        +getHitpoints() int\n        +setHitpoints(hitpoints int) void\n        +print() void\n    }"}),(0,r.kt)("h2",{id:"hinweise-zur-klasse-creature"},"Hinweise zur Klasse Creature"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Passe die Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"boolean attack(creature: Creature)")," so an, dass der R\xfcckgabewert\n",(0,r.kt)("inlineCode",{parentName:"li"},"true")," ist, wenn die Lebenspunkte der angegriffenen Kreatur kleiner gleich\nNull sind, bzw. ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", wenn nicht"),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"void print()")," soll alle Attribute auf der Konsole ausgeben")),(0,r.kt)("h2",{id:"hinweise-zur-klasse-creaturegame"},"Hinweise zur Klasse CreatureGame"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren"),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"void simulateFight()"),' soll die beiden Kreaturen sich so lange\ngegenseitig angreifen lassen, bis eine der Kreaturen "stirbt"'),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"boolean move(creature1: Creature, creature2: Creature)")," soll eine Kreatur die andere\nangreifen lassen und den R\xfcckgabewert ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),' liefern, wenn die angegriffene\nKreatur "stirbt", bzw. ',(0,r.kt)("inlineCode",{parentName:"li"},"false"),", wenn nicht"),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("inlineCode",{parentName:"li"},"void print()")," soll alle Attribute auf der Konsole ausgeben")),(0,r.kt)("h2",{id:"konsolenausgabe"},"Konsolenausgabe"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"Runde 1: Zombie (2 - 10), Vampir (4 - 6)\nZombie greift Vampir an und erzielt 2 Schaden\nVampir hat noch 4 Lebenspunkte\nVampir greift Zombie an und erzielt 4 Schaden\nZombie hat noch 6 Lebenspunkte\n\u2026\nRunde 3: Zombie (2 - 2), Vampir (4 - 2)\nZombie greift Vampir an und erzielt 2 Schaden\nVampir wurde vernichtet\n")),(0,r.kt)(i.Z,{pullRequest:"38",branchSuffix:"class-diagrams/03",mdxType:"Exercise"}))}p.isMDXComponent=!0}}]);