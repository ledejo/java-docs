"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[7600],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=i.createContext({}),o=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=o(e.components);return i.createElement(u.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=o(t),c=a,g=p["".concat(u,".").concat(c)]||p[c]||m[c]||r;return t?i.createElement(g,l(l({ref:n},d),{},{components:t})):i.createElement(g,l({ref:n},d))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=c;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var o=2;o<r;o++)l[o]=t[o];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},3464:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>o});var i=t(7462),a=(t(7294),t(3905));const r={title:"Musterklausur",description:"",sidebar_position:10,tags:[]},l=void 0,s={unversionedId:"additional-material/daniel-java1/sample-exam",id:"additional-material/daniel-java1/sample-exam",title:"Musterklausur",description:"",source:"@site/docs/additional-material/daniel-java1/sample-exam.md",sourceDirName:"additional-material/daniel-java1",slug:"/additional-material/daniel-java1/sample-exam",permalink:"/java-docs/additional-material/daniel-java1/sample-exam",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/additional-material/daniel-java1/sample-exam.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Musterklausur",description:"",sidebar_position:10,tags:[]},sidebar:"additionalMaterialSidebar",previous:{title:"Daniel (Programmierung 1)",permalink:"/java-docs/additional-material/daniel-java1/"},next:{title:"Cheatsheet",permalink:"/java-docs/additional-material/daniel-java1/cheatsheet"}},u={},o=[{value:"Hinweise zur Klausur",id:"hinweise-zur-klausur",level:2},{value:"Aufgabe 1 (20 Punkte)",id:"aufgabe-1-20-punkte",level:2},{value:"Quelltext",id:"quelltext",level:3},{value:"Musterl\xf6sung",id:"musterl\xf6sung",level:3},{value:"Aufgabe 2 (20 Punkte)",id:"aufgabe-2-20-punkte",level:2},{value:"Klassendiagramm",id:"klassendiagramm",level:3},{value:"Hinweise zur Klasse Class",id:"hinweise-zur-klasse-class",level:3},{value:"Musterl\xf6sung",id:"musterl\xf6sung-1",level:3},{value:"Aufgabe 3 (21 Punkte)",id:"aufgabe-3-21-punkte",level:2},{value:"Klassendiagramm",id:"klassendiagramm-1",level:3},{value:"Aktivit\xe4tsdiagramme",id:"aktivit\xe4tsdiagramme",level:3},{value:"Beispielhafte Konsolenausgaben",id:"beispielhafte-konsolenausgaben",level:3},{value:"Musterl\xf6sung",id:"musterl\xf6sung-2",level:3},{value:"Aufgabe 4 (21 Punkte)",id:"aufgabe-4-21-punkte",level:2},{value:"Klassendiagramm",id:"klassendiagramm-2",level:3},{value:"Hinweis zur Klasse Player",id:"hinweis-zur-klasse-player",level:3},{value:"Beispielhafte Konsolenausgabe",id:"beispielhafte-konsolenausgabe",level:3},{value:"Musterl\xf6sung",id:"musterl\xf6sung-3",level:3},{value:"Aufgabe 5 (21 Punkte)",id:"aufgabe-5-21-punkte",level:2},{value:"Klassendiagramm",id:"klassendiagramm-3",level:3},{value:"Hinweise zur Klasse StuffedCookie",id:"hinweise-zur-klasse-stuffedcookie",level:3},{value:"Hinweise zur Klasse CookieJar",id:"hinweise-zur-klasse-cookiejar",level:3},{value:"Hinweis zur Klasse IngredientsReader",id:"hinweis-zur-klasse-ingredientsreader",level:3},{value:"Beispielhafter Aufbau der Zutatendatei",id:"beispielhafter-aufbau-der-zutatendatei",level:3},{value:"Musterl\xf6sung",id:"musterl\xf6sung-4",level:3}],d={toc:o},p="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"hinweise-zur-klausur"},"Hinweise zur Klausur"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Die in dieser Klausur verwendeten Personenbezeichnungen beziehen sich \u2013 sofern\nnicht anders kenntlich gemacht \u2013 auf alle Geschlechter"),(0,a.kt)("li",{parentName:"ul"},"Es kann davon ausgegangen werden, dass s\xe4mtliche Klassen entsprechende\nImplementierungen der Object-Methoden besitzen"),(0,a.kt)("li",{parentName:"ul"},"Der Stereotyp ",(0,a.kt)("inlineCode",{parentName:"li"},"<<enumeration>>")," impliziert, dass die Aufz\xe4hlung einen\npassenden, privaten Konstruktor sowie gegebenenfalls passende Getter f\xfcr alle\nAttribute besitzt"),(0,a.kt)("li",{parentName:"ul"},"Pakete und Klassenimporte m\xfcssen nicht angegeben werden"),(0,a.kt)("li",{parentName:"ul"},"F\xfcr die Konsolenausgabe kann das K\xfcrzel ",(0,a.kt)("em",{parentName:"li"},"sysout")," verwendet werden"),(0,a.kt)("li",{parentName:"ul"},"Methoden- und Attributsbezeichner d\xfcrfen sinnvoll gek\xfcrzt geschrieben werden\n(Beispiel ",(0,a.kt)("em",{parentName:"li"},"getLWMCP()")," statt ",(0,a.kt)("em",{parentName:"li"},"getLectureWithMostCreditPoints()"),")")),(0,a.kt)("h2",{id:"aufgabe-1-20-punkte"},"Aufgabe 1 (20 Punkte)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Welche Konsolenausgabe erzeugen die Methoden ",(0,a.kt)("inlineCode",{parentName:"li"},"void a()"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"void b()"),",\n",(0,a.kt)("inlineCode",{parentName:"li"},"void c()")," und ",(0,a.kt)("inlineCode",{parentName:"li"},"void d()")," der abgebildeten Klasse ",(0,a.kt)("inlineCode",{parentName:"li"},"ExamTask01")," (15 Punkte)?"),(0,a.kt)("li",{parentName:"ul"},"Notiere jeweils Bezeichner sowie Zeilennummer der Deklaration und Zeilennummer\nder Initialisierung aller Datenobjekte der Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"void d()")," der abgebildeten\nKlasse ",(0,a.kt)("inlineCode",{parentName:"li"},"ExamTask01")," (5 Punkte)")),(0,a.kt)("h3",{id:"quelltext"},"Quelltext"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="ExamTask01" showLineNumbers',title:'"ExamTask01"',showLineNumbers:!0},'public class ExamTask01 {\n\n  private static String textA, textB;\n\n  private static void a() {\n    byte byte1 = 0b1011010;\n    byte byte2 = 0b101110;\n    int int1 = byte1 - byte2;\n    System.out.println("byte1: " + byte1);\n    System.out.println("byte2: " + byte2);\n    System.out.println("int1: " + int1);\n  }\n\n  private static void b() {\n    String[] values = {"cold", "AEIOU", "hot"};\n    int index1 = values[2].length() == 3 ? 2 : 0;\n    String value1 = values[index1];\n    int index2 = (int) (2.1 + 2.8);\n    char value2 = values[1].charAt(index2);\n    System.out.println(index1 + value1 + index2 + value2);\n  }\n\n  private static void c() {\n    char x = \'X\';\n    for (int i = 0; i < 5; i++) {\n      System.out.print(i + ": ");\n      for (int j = 5 - i - 1; j > 0; j--) {\n        System.out.print(x);\n      }\n      System.out.println();\n    }\n  }\n\n  private static void d() {\n    textA = new String("Text A");\n    textB = new String("Text B");\n    boolean boolean1, boolean2;\n    int int2 = 1;\n    boolean1 = (textA == textB) ? true : false;\n    boolean2 = boolean1 && ++int2 % 2 == 0 ? true : false;\n    System.out.println("int2: " + int2);\n    System.out.println("boolean1: " + boolean1);\n    System.out.println("boolean2: " + boolean2);\n  }\n\n}\n')),(0,a.kt)("h3",{id:"musterl\xf6sung"},"Musterl\xf6sung"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"byte1: 90\nbyte2: 46\nint1: 44\n2hot4U\n0: XXXX\n1: XXX\n2: XX\n3: X\n4:\nint2: 1\nboolean1: false\nboolean2: false\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Bezeichner"),(0,a.kt)("th",{parentName:"tr",align:null},"Deklaration"),(0,a.kt)("th",{parentName:"tr",align:null},"Initialisierung"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"textA")),(0,a.kt)("td",{parentName:"tr",align:null},"3"),(0,a.kt)("td",{parentName:"tr",align:null},"35")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"textB")),(0,a.kt)("td",{parentName:"tr",align:null},"3"),(0,a.kt)("td",{parentName:"tr",align:null},"36")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean1")),(0,a.kt)("td",{parentName:"tr",align:null},"37"),(0,a.kt)("td",{parentName:"tr",align:null},"39")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean2")),(0,a.kt)("td",{parentName:"tr",align:null},"37"),(0,a.kt)("td",{parentName:"tr",align:null},"40")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"int2")),(0,a.kt)("td",{parentName:"tr",align:null},"38"),(0,a.kt)("td",{parentName:"tr",align:null},"38")))),(0,a.kt)("h2",{id:"aufgabe-2-20-punkte"},"Aufgabe 2 (20 Punkte)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Erstelle die Klasse ",(0,a.kt)("inlineCode",{parentName:"li"},"Class")," anhand des abgebildeten Klassendiagramms (15\nPunkte)"),(0,a.kt)("li",{parentName:"ul"},"Erstelle die ausf\xfchrbare Klasse ",(0,a.kt)("inlineCode",{parentName:"li"},"ExamTask02")," wie folgt (5 Punkte): Erstelle\neinen Kurs mit 2 Studierenden und 2 Vorlesungen und gib anschlie\xdfend den Kurs\nsowie die Vorlesung mit den meisten Creditpoints auf der Konsole aus")),(0,a.kt)("h3",{id:"klassendiagramm"},"Klassendiagramm"),(0,a.kt)("mermaid",{value:"classDiagram\n    Class o-- Lecture\n    Class o-- Student\n    Class o-- CourseOfStudies\n\n    class Class {\n        -description String\n        -courseOfStudies CourseOfStudies\n        -lectures List~Lecture~\n        -students List~Student~\n        +Class(description String, courseOfStudies CourseOfStudies)\n        +description() String\n        +courseOfStudies() CourseOfStudies\n        +lectures() List~Lecture~\n        +students() List~Student~\n        +addLecture(lecture Lecture) void\n        +addStudent(student Student) void\n        +getLectureWithMostCreditPoints() Lecture\n        +toString() String\n    }\n\n    class Student {\n        -matriculationNumber String\n        -name String\n        +Student(matriculationNumber String, name String)\n        +matriculationNumber() String\n        +name() String\n        +toString() String\n    }\n\n    class Lecture {\n        -description String\n        -creditPoints int\n        +Lecture(description String, creditPoints int)\n        +description() String\n        +creditPoints() int\n        +toString() String\n    }\n\n    class CourseOfStudies {\n        <<enumeration>>\n        WI = Wirtschaftsinformatik\n        INF = Informatik\n        BWL = Betriebswirtschaftslehre\n        -description String\n    }\n\n    class ExamTask02 {\n        +main(args String[])$ void\n    }"}),(0,a.kt)("h3",{id:"hinweise-zur-klasse-class"},"Hinweise zur Klasse Class"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"void addStudent(student Student)")," soll der Studierendenliste\n(",(0,a.kt)("inlineCode",{parentName:"li"},"students"),") den eingehenden Studierenden hinzuf\xfcgen"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"void addLecture(lecture Lecture)")," soll der Vorlesungsliste\n(",(0,a.kt)("inlineCode",{parentName:"li"},"lectures"),") die eingehende Vorlesung hinzuf\xfcgen"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"Lecture getLectureWithMostCreditPoints()")," soll die Vorlesung mit\nden meisten Creditpoints zur\xfcckgeben"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"String toString()")," soll den Kurs in der Form ",(0,a.kt)("em",{parentName:"li"},"Class\n[description=[Beschreibung des Kurses","]",", courseOfStudies=[Beschreibung des\nStudiengangs","]",", lectures=[Vorlesungen","]",", students=[Studierende","]","]"),"\nzur\xfcckgeben")),(0,a.kt)("h3",{id:"musterl\xf6sung-1"},"Musterl\xf6sung"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Class.java" showLineNumbers',title:'"Class.java"',showLineNumbers:!0},'public class Class { // 0,5\n\n  private String description; // 0,25\n  private CourseOfStudies courseOfStudies; // 0,25\n  private List<Lecture> lectures; // 0,25\n  private List<Student> students; // 0,25\n\n  public Class(String description, CourseOfStudies courseOfStudies) { // 0,5\n    this.description = description; // 0,25\n    this.courseOfStudies = courseOfStudies; // 0,25\n    this.lectures = lectures; // 0,25\n    lectures = new ArrayList<>(); // 0,25\n    students = new ArrayList<>(); // 0,25\n  }\n\n  public String description() { // 0,5\n    return description; // 0,5\n  }\n\n  public CourseOfStudies courseOfStudies() { // 0,5\n    return courseOfStudies; // 0,5\n  }\n\n  public List<Lecture> lectures() { // 0,5\n    return lectures; // 0,5\n  }\n\n  public List<Student> students() { // 0,5\n    return students; // 0,5\n  }\n\n  public void addLecture(Lecture lecture) { // 0,5\n    lectures.add(lecture); // 0,5\n  }\n\n  public void addStudent(Student student) { // 0,5\n    students.add(student); // 0,5\n  }\n\n  public Lecture getLectureWithMostCreditPoints() { // 0,5\n    Lecture lecture = lectures.get(0); // 0,5\n    int creditPoints = lecture.creditPoints(); // 0,5\n    for (int i = 0; i < lectures.size(); i++) { // 0,5\n      if (lectures.get(i).creditPoints() > creditPoints) { // 1\n        lecture = lectures.get(i); // 0,5\n        creditPoints = lecture.creditPoints(); // 0,5\n      }\n    }\n    return lecture; // 0,5\n  }\n\n  public String toString() { // 0,5\n    return "Class [description=" + description + ", courseOfStudies=" + courseOfStudies.description()\n      + ", lectures=" + lectures + ", students=" + students + "]"; // 1\n  }\n\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="ExamTask02.java" showLineNumbers',title:'"ExamTask02.java"',showLineNumbers:!0},'public class ExamTask02 { // 0,5\n\n  public static void main(String[] args) { // 0,5\n\n    List<Lecture> lectures = new ArrayList<>(); // 0,5\n    lectures.add(new Lecture("Mathe", 5)); // 0,5\n    lectures.add(new Lecture("Programmierung", 10)); // 0,5\n\n    Class class1 = new Class("WWIBE122", CourseOfStudies.WI, lectures); // 0,5\n    class1.addStudent(new Student("8271625", "Hans Maier")); // 0,5\n    class1.addStudent(new Student("9102934", "Peter M\xfcller")); // 0,5\n\n    System.out.println(class1.toString()); // 0,5\n    System.out.println(class1.getLectureWithMostCreditPoints()); // 0,5\n\n  }\n\n}\n')),(0,a.kt)("h2",{id:"aufgabe-3-21-punkte"},"Aufgabe 3 (21 Punkte)"),(0,a.kt)("p",null,"Erstelle die Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"ExamTask03")," anhand des abgebildeten Klassendiagramms sowie\nanhand der abgebildeten Aktivit\xe4tsdiagramme."),(0,a.kt)("h3",{id:"klassendiagramm-1"},"Klassendiagramm"),(0,a.kt)("p",null,"folgt"),(0,a.kt)("h3",{id:"aktivit\xe4tsdiagramme"},"Aktivit\xe4tsdiagramme"),(0,a.kt)("p",null,"folgt"),(0,a.kt)("h3",{id:"beispielhafte-konsolenausgaben"},"Beispielhafte Konsolenausgaben"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"PIN: 387\nPIN ist ung\xfcltig (L\xe4nge)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"PIN: 3871\nPIN ist ung\xfcltig (Zahlenwert)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"PIN: 3872\nPIN ist g\xfcltig\n")),(0,a.kt)("h3",{id:"musterl\xf6sung-2"},"Musterl\xf6sung"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="ExamTask03.java" showLineNumbers',title:'"ExamTask03.java"',showLineNumbers:!0},'public class ExamTask03 { // 0,5\n\n  private static int[] pin; // 0,5\n\n  public static void main(String[] args) { // 0,5\n    @SuppressWarnings("resource")\n    Scanner sc = new Scanner(System.in); // 1\n\n    System.out.print("Bitte PIN eingeben: "); // 0,5\n    String text = sc.next(); // 0,5\n    textToPin(text); // 0,5\n    if (!checkPinLength()) { // 0,5\n      System.out.println("PIN ist ung\xfcltig (L\xe4nge)"); // 0,5\n    } else if (!checkPinValue()) { // 0,5\n      System.out.println("PIN ist ung\xfcltig (Zahlenwert)"); // 0,5\n    } else { // 0,5\n      System.out.println("PIN ist g\xfcltig"); // 0,5\n    }\n  }\n\n  private static boolean checkPinLength() { // 0,5\n    int length = pin.length; // 0,5\n    if (length < 4 || length > 8) { // 1\n      return false; // 0,5\n    }\n    return true; // 0,5\n  }\n\n  private static boolean checkPinValue() { // 0,5\n    int length = pin.length; // 0,5\n    int total = 0; // 0,5\n    int i = 0; // 0,5\n    while (i < length) { // 1\n      int value = pin[i]; // 0,5\n      total += value; // 0,5\n      i++; // 0,5\n    }\n    if (total % 2 != 0) { // 1\n      return false; // 0,5\n    }\n    return true; // 0,5\n  }\n\n  private static void textToPin(String text) { // 0,5\n    int length = text.length(); // 0,5\n    pin = new int[length]; // 0,5\n    int i = 0; // 0,5\n    while (i < length) { // 0,5\n      char c = text.charAt(i); // 0,5\n      pin[i] = Integer.valueOf(c); // 1\n      i++; // 0,5\n    }\n  }\n\n}\n')),(0,a.kt)("h2",{id:"aufgabe-4-21-punkte"},"Aufgabe 4 (21 Punkte)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Erstelle die Klasse ",(0,a.kt)("inlineCode",{parentName:"li"},"Player")," (7 Punkte) anhand des abgebildeten\nKlassendiagramms"),(0,a.kt)("li",{parentName:"ul"},"Erstelle die ausf\xfchrbare Klasse ",(0,a.kt)("inlineCode",{parentName:"li"},"ExamTask04")," wie folgt (14 Punkte):",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Zu Beginn des Spiels sollen die Spieler ihre Namen eingeben k\xf6nnen"),(0,a.kt)("li",{parentName:"ul"},"Zu Beginn einer jeder Runde soll der aktuelle Punktestand ausgegeben werden"),(0,a.kt)("li",{parentName:"ul"},"Anschlie\xdfend sollen beide Spieler ihre W\xfcrfel werfen"),(0,a.kt)("li",{parentName:"ul"},"Der Spieler mit dem niedrigeren Wurfwert soll einen Lebenspunkt verlieren,\nbei Gleichstand soll keiner der Spieler einen Lebenspunkt verlieren"),(0,a.kt)("li",{parentName:"ul"},"Das Spiel soll Enden, sobald ein Spieler keine Lebenspunkte mehr besitzt"),(0,a.kt)("li",{parentName:"ul"},"Am Ende soll der Gewinner des Spiels ausgegeben werden")))),(0,a.kt)("h3",{id:"klassendiagramm-2"},"Klassendiagramm"),(0,a.kt)("mermaid",{value:"classDiagram\n    ExamTask04 o-- Player\n    Player o-- Dice\n\n    class ExamTask04 {\n        -player1 Player$\n        -player2 Player$\n        -scanner Scanner$\n        +main(args String[])$ void\n    }\n\n    class Player {\n        -name String\n        -healthPoints int\n        -dice Dice\n        +Player(name String)\n        +name() String\n        +getHealthPoints() int\n        +reduceHealthPoints() int\n        +rollTheDice() int\n    }\n\n    class Dice {\n        -value int\n        +getValue() int\n        +rollTheDice() void\n    }"}),(0,a.kt)("h3",{id:"hinweis-zur-klasse-player"},"Hinweis zur Klasse Player"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Der Konstruktor soll den Namen (",(0,a.kt)("inlineCode",{parentName:"li"},"name"),") mit dem eingehenden Namen belegen, die\nLebenspunkte des Spielers (",(0,a.kt)("inlineCode",{parentName:"li"},"healthPoints"),") auf den Wert 10 setzen sowie den\nW\xfcrfel (",(0,a.kt)("inlineCode",{parentName:"li"},"dice"),") initialisieren"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"int rollTheDice()")," soll den W\xfcrfel des Spielers werfen und den\nW\xfcrfelwert zur\xfcckgeben"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"void reduceHealthPoints()")," soll die Lebenspunkte des Spielers\n(",(0,a.kt)("inlineCode",{parentName:"li"},"healthPoints"),") um 1 reduzieren")),(0,a.kt)("h3",{id:"beispielhafte-konsolenausgabe"},"Beispielhafte Konsolenausgabe"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"Spieler 1, gib bitte Deinen Namen ein: Hans\nSpieler 2, gib bitte Deinen Namen ein: Peter\n\nHans hat 10 Lebenspunkte\nPeter hat 10 Lebenspunkte\nHans w\xfcrfelt eine 6\nPeter w\xfcrfelt eine 6\n\u2026\nHans hat 4 Lebenspunkte\nPeter hat 1 Lebenspunkte\nHans w\xfcrfelt eine 5\nPeter w\xfcrfelt eine 1\nPeter verliert einen Punkt\n\nHans gewinnt\n")),(0,a.kt)("h3",{id:"musterl\xf6sung-3"},"Musterl\xf6sung"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Player.java" showLineNumbers',title:'"Player.java"',showLineNumbers:!0},"public class Player { // 0,5\n\n  private String name; // 0,25\n  private int healthPoints; // 0,25\n  private Dice dice; // 0,25\n\n  public Player(String name) { // 0,5\n    this.name = name; // 0,25\n    healthPoints = 10; // 0,5\n    dice = new Dice(); // 0,5\n  }\n\n  public String name() { // 0,5\n    return name; // 0,5\n  }\n\n  public int getHealthPoints() { // 0,5\n    return healthPoints; // 0,5\n  }\n\n  public int rollTheDice() { // 0,5\n    dice.rollTheDice(); // 0,25\n    return dice.getValue(); // 0,25\n  }\n\n  public void reduceHealthPoints() { // 0,5\n    healthPoints--; // 0,5\n  }\n\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="ExamTask04.java" showLineNumbers',title:'"ExamTask04.java"',showLineNumbers:!0},'public class ExamTask04 { // 0,5\n\n  private static Player player1; // 0,25\n  private static Player player2; // 0,25\n  private static Scanner scanner; // 0,25\n\n  public static void main(String[] args) { // 0,5\n\n    scanner = new Scanner(System.in); // 0,25\n\n    System.out.print("Spieler 1, gib bitte Deinen Namen ein: "); // 0,5\n    String name1 = scanner.nextLine(); // 0,5\n    player1 = new Player(name1); // 0,5\n\n    System.out.print("Spieler 2, gib bitte Deinen Namen ein: "); // 0,5\n    String name2 = scanner.nextLine(); // 0,5\n    player2 = new Player(name2); // 0,5\n\n    System.out.println();\n\n    while (player1.getHealthPoints() > 0 && player2.getHealthPoints() > 0) { // 1\n      System.out.println(player1.name() + " hat " + player1.getHealthPoints() + " Lebenspunkte"); // 0,5\n      System.out.println(player2.name() + " hat " + player2.getHealthPoints() + " Lebenspunkte"); // 0,5\n      int value1 = player1.rollTheDice(); // 0,5\n      System.out.println(player1.name() + " w\xfcrfelt eine " + value1); // 0,5\n      int value2 = player2.rollTheDice(); // 0,5\n      System.out.println(player2.name() + " w\xfcrfelt eine " + value2); // 0,5\n      if (value1 > value2) { // 0,5\n        player2.reduceHealthPoints(); // 0,5\n        System.out.println(player2.name() + " verliert einen Punkt");// 0,5\n      } else if (value2 > value1) { // 0,5\n        player1.reduceHealthPoints(); // 0,5\n        System.out.println(player1.name() + " verliert einen Punkt");// 0,5\n      }\n      System.out.println();\n    }\n\n    if (player1.getHealthPoints() > player2.getHealthPoints()) {// 0,5\n      System.out.println(player1.name() + " gewinnt");// 0,5\n    } else {// 0,5\n      System.out.println(player2.name() + " gewinnt");// 0,5\n    }\n\n  }\n\n}\n')),(0,a.kt)("h2",{id:"aufgabe-5-21-punkte"},"Aufgabe 5 (21 Punkte)"),(0,a.kt)("p",null,"Erstelle die Klassen ",(0,a.kt)("inlineCode",{parentName:"p"},"StuffedCookie")," (8 Punkte), ",(0,a.kt)("inlineCode",{parentName:"p"},"CookieJar")," (7 Punkte) und\n",(0,a.kt)("inlineCode",{parentName:"p"},"IngredientsReader")," (6 Punkte) anhand des abgebildeten Klassendiagramms."),(0,a.kt)("h3",{id:"klassendiagramm-3"},"Klassendiagramm"),(0,a.kt)("mermaid",{value:"classDiagram\n    CookieJar o-- Cookie\n    Cookie <|-- StuffedCookie\n    Cookie o-- Recipe\n    StuffedCookie o-- Recipe\n    Recipe o-- Ingredient\n\n    class CookieJar {\n        -cookies List~Cookie~\n        +CookieJar()\n        +addCookie(cookie Cookie) void\n        +getStuffedCookie() StuffedCookie\n    }\n\n    class Cookie {\n        -name String\n        -dough Recipe\n        +Cookie(name String, dough Recipe)\n        +getIngredients() List~Ingredient~\n    }\n\n    class StuffedCookie {\n        -jam Recipe\n        +StuffedCookie(name String, dough Recipe, jam Recipe)\n        +getIngredients() List~Ingredient~\n    }\n\n    class Recipe {\n        -name String\n        -ingredients List~Ingredient~\n        +Recipe(name String)\n        +addIngredient(ingredient Ingredient) void\n    }\n\n    class Ingredient {\n        -name String\n        +Ingredient(name String)\n    }\n\n    class IngredientsReader {\n        +readIngredients(file File)$ List~Ingredient~\n    }"}),(0,a.kt)("h3",{id:"hinweise-zur-klasse-stuffedcookie"},"Hinweise zur Klasse StuffedCookie"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"List<Ingredient> getIngredients()")," soll alle Zutaten zur\xfcckgeben.\nDoppelte Zutaten sollen dabei nur einmal zur\xfcckgegeben werden")),(0,a.kt)("h3",{id:"hinweise-zur-klasse-cookiejar"},"Hinweise zur Klasse CookieJar"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"void addCookie(cookie Cookie)")," soll der Pl\xe4tzchenbox ein\nPl\xe4tzchen hinzuf\xfcgen"),(0,a.kt)("li",{parentName:"ul"},"Die Methode ",(0,a.kt)("inlineCode",{parentName:"li"},"StuffedCookie getStuffedCookie()")," soll ein gef\xfclltes Pl\xe4tzchen\nzur\xfcckgeben und aus der Pl\xe4tzchenbox entfernen. F\xfcr den Fall, dass kein\ngef\xfclltes Pl\xe4tzchen vorhanden ist, soll der Wert ",(0,a.kt)("inlineCode",{parentName:"li"},"null")," zur\xfcckgegeben werden")),(0,a.kt)("h3",{id:"hinweis-zur-klasse-ingredientsreader"},"Hinweis zur Klasse IngredientsReader"),(0,a.kt)("p",null,"Die statische Methode ",(0,a.kt)("inlineCode",{parentName:"p"},"List<Ingredient> readIngredients()")," soll alle Zutaten der\neingehenden Zutatendatei lesen und zur\xfcckgeben."),(0,a.kt)("h3",{id:"beispielhafter-aufbau-der-zutatendatei"},"Beispielhafter Aufbau der Zutatendatei"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"Mehl\nZucker\n...\n")),(0,a.kt)("h3",{id:"musterl\xf6sung-4"},"Musterl\xf6sung"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="StuffedCookie.java" showLineNumbers',title:'"StuffedCookie.java"',showLineNumbers:!0},"public class StuffedCookie extends Cookie { // 1\n\n  private Recipe jam; // 0,25\n\n  public StuffedCookie(String name, Recipe dough, Recipe jam) { // 0,5\n    super(name, dough); // 1\n    this.jam = jam; // 0,25\n  }\n\n  public List<Ingredient> getIngredients() { // 0,5\n    List<Ingredient> ingredients = super.getIngredients(); // 0,5\n    for (int i = 0; i < jam.ingredients().size(); i++) { // 1\n      Ingredient ingredient = jam.ingredients().get(i); // 1\n      if (ingredients.contains(ingredient)) { // 0,5\n        continue; // 0,5\n      }\n      ingredients.add(ingredient); // 0,5\n    }\n    return ingredients; // 0,5\n  }\n\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="CookieJar.java" showLineNumbers',title:'"CookieJar.java"',showLineNumbers:!0},"public class CookieJar { // 0,5\n\n  private List<Cookie> cookies; // 0,25\n\n  public CookieJar() { // 0,5\n    cookies = new ArrayList<>(); // 0,25\n  }\n\n  public void addCookie(Cookie cookie) { // 0,5\n    cookies.add(cookie); // 0,5\n  }\n\n  public StuffedCookie getStuffedCookie() { // 0,5\n    for (int i = 0; i < cookies.size(); i++) { // 0,5\n      Cookie cookie = cookies.get(i); // 0,5\n      if (cookie instanceof StuffedCookie s) { // 1,5\n        cookies.remove(s); // 0,5\n        return s; // 0,5\n      }\n    }\n    return null; // 0,5\n  }\n\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="IngredientsReader.java" showLineNumbers',title:'"IngredientsReader.java"',showLineNumbers:!0},"public class IngredientsReader { // 0,5\n\n  public static List<Ingredient> readIngredients(File file) throws FileNotFoundException { // 1\n    Scanner sc = new Scanner(file); // 1\n\n    List<Ingredient> ingredients = new ArrayList<>(); // 0,5\n    while (sc.hasNextLine()) { // 1\n      String line = sc.nextLine(); // 0,5\n      Ingredient i = new Ingredient(line); // 0,5\n      ingredients.add(i); // 0,5\n    }\n\n    sc.close();\n    return ingredients; // 0,5\n  }\n\n}\n")))}m.isMDXComponent=!0}}]);