"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[6602],{3905:(e,a,r)=>{r.d(a,{Zo:()=>m,kt:()=>h});var n=r(7294);function t(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function i(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?i(Object(r),!0).forEach((function(a){t(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function s(e,a){if(null==e)return{};var r,n,t=function(e,a){if(null==e)return{};var r,n,t={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],a.indexOf(r)>=0||(t[r]=e[r]);return t}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var o=n.createContext({}),c=function(e){var a=n.useContext(o),r=a;return e&&(r="function"==typeof e?e(a):l(l({},a),e)),r},m=function(e){var a=c(e.components);return n.createElement(o.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},p=n.forwardRef((function(e,a){var r=e.components,t=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(r),p=t,h=u["".concat(o,".").concat(p)]||u[p]||d[p]||i;return r?n.createElement(h,l(l({ref:a},m),{},{components:r})):n.createElement(h,l({ref:a},m))}));function h(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=r.length,l=new Array(i);l[0]=p;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s[u]="string"==typeof e?e:t,l[1]=s;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2969:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7462),t=(r(7294),r(3905));const i={title:"Geometrische Form",description:"",tags:["oo","inheritance","polymorphy","io-streams"]},l=void 0,s={unversionedId:"exam-exercises/exam-exercises-java1/shape",id:"exam-exercises/exam-exercises-java1/shape",title:"Geometrische Form",description:"",source:"@site/docs/exam-exercises/exam-exercises-java1/shape.md",sourceDirName:"exam-exercises/exam-exercises-java1",slug:"/exam-exercises/exam-exercises-java1/shape",permalink:"/java-docs/exam-exercises/exam-exercises-java1/shape",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/exam-exercises/exam-exercises-java1/shape.md",tags:[{label:"oo",permalink:"/java-docs/tags/oo"},{label:"inheritance",permalink:"/java-docs/tags/inheritance"},{label:"polymorphy",permalink:"/java-docs/tags/polymorphy"},{label:"io-streams",permalink:"/java-docs/tags/io-streams"}],version:"current",frontMatter:{title:"Geometrische Form",description:"",tags:["oo","inheritance","polymorphy","io-streams"]},sidebar:"examExercisesSidebar",previous:{title:"Tiefgarage",permalink:"/java-docs/exam-exercises/exam-exercises-java1/parking-garage"},next:{title:"Kurs",permalink:"/java-docs/exam-exercises/exam-exercises-java1/student-course"}},o={},c=[{value:"Klassendiagramm",id:"klassendiagramm",level:2},{value:"Allgemeine Hinweise",id:"allgemeine-hinweise",level:2},{value:"Hinweise zur Klasse Shape",id:"hinweise-zur-klasse-shape",level:2},{value:"Hinweise zur Klasse Circle",id:"hinweise-zur-klasse-circle",level:2},{value:"Hinweise zur Klasse Rectangle",id:"hinweise-zur-klasse-rectangle",level:2},{value:"Hinweise zur Klasse ShapeReader",id:"hinweise-zur-klasse-shapereader",level:2},{value:"Beispielhafter Aufbau der Formendatei",id:"beispielhafter-aufbau-der-formendatei",level:2}],m={toc:c},u="wrapper";function d(e){let{components:a,...r}=e;return(0,t.kt)(u,(0,n.Z)({},m,r,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Setze das abgebildete Klassendiagramm vollst\xe4ndig um. Erstelle zum Testen eine ausf\xfchrbare Klasse."),(0,t.kt)("h2",{id:"klassendiagramm"},"Klassendiagramm"),(0,t.kt)("mermaid",{value:"classDiagram\n    ShapeReader o-- Shape\n    Shape <|-- Circle\n    Shape <|-- Rectangle\n    Rectangle <|-- Square\n\n    class ShapeReader {\n        -shapes Arraylist~Shape~\n        +ShapeReader(file File)\n        +getCircles() ArrayList~Circle~\n        +getShapesWithMinArea(minArea double) ArrayList~Shape~\n    }\n\n    class Shape {\n        +getArea() double\n        +getCircumference() double\n    }\n\n    class Circle {\n        -r double\n        +Circle(r double)\n        +getArea() double\n        +getCircumference() double\n    }\n\n    class Rectangle {\n        -a double\n        -b double\n        +Rectangle(a double, b double)\n        +getArea() double\n        +getCircumference() double\n    }\n\n    class Square {\n        +Square(a double)\n    }"}),(0,t.kt)("h2",{id:"allgemeine-hinweise"},"Allgemeine Hinweise"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Aus Gr\xfcnden der \xdcbersicht werden im Klassendiagramm keine Getter und Object-Methoden dargestellt"),(0,t.kt)("li",{parentName:"ul"},"So nicht anders angegeben, sollen Konstruktoren, Setter, Getter sowie die Object-Methoden wie gewohnt implementiert werden"),(0,t.kt)("li",{parentName:"ul"},"Die statische Konstante ",(0,t.kt)("inlineCode",{parentName:"li"},"PI")," der Klasse ",(0,t.kt)("inlineCode",{parentName:"li"},"Math")," stellt die Kreiszahl Pi dar")),(0,t.kt)("h2",{id:"hinweise-zur-klasse-shape"},"Hinweise zur Klasse Shape"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"double getArea()")," soll den Wert ",(0,t.kt)("em",{parentName:"li"},"0")," zur\xfcckgeben"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"double getCircumference()")," soll den Wert ",(0,t.kt)("em",{parentName:"li"},"0")," zur\xfcckgeben")),(0,t.kt)("h2",{id:"hinweise-zur-klasse-circle"},"Hinweise zur Klasse Circle"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"double getArea()")," soll den Fl\xe4cheninhalt gem\xe4\xdf der Formel ",(0,t.kt)("em",{parentName:"li"},"Pi ",(0,t.kt)("em",{parentName:"em"}," r ")," r")," berechnen und zur\xfcckgeben"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"double getCircumference()")," soll den Umfang gem\xe4\xdf der Formel ",(0,t.kt)("em",{parentName:"li"},"2 ",(0,t.kt)("em",{parentName:"em"}," Pi ")," r")," berechnen und zur\xfcckgeben")),(0,t.kt)("h2",{id:"hinweise-zur-klasse-rectangle"},"Hinweise zur Klasse Rectangle"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"double getArea()")," soll den Fl\xe4cheninhalt gem\xe4\xdf der Formel ",(0,t.kt)("em",{parentName:"li"},"a ","*"," b")," berechnen und zur\xfcckgeben"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"double getCircumference()")," soll den Umfang gem\xe4\xdf der Formel ",(0,t.kt)("em",{parentName:"li"},"2 ",(0,t.kt)("em",{parentName:"em"}," a + 2 ")," b")," berechnen und zur\xfcckgeben")),(0,t.kt)("h2",{id:"hinweise-zur-klasse-shapereader"},"Hinweise zur Klasse ShapeReader"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Der Konstruktor soll der Formenliste (",(0,t.kt)("inlineCode",{parentName:"li"},"shapes"),") alle Formen der eingehenden Datei hinzuf\xfcgen"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"ArrayList<Circle> getCircles()")," soll alle Kreise der Formenliste (",(0,t.kt)("inlineCode",{parentName:"li"},"shapes"),") zur\xfcckgeben"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"ArrayList<Shape> getShapesWithMinArea(minArea: double)")," soll alle Formen der Formenliste (",(0,t.kt)("inlineCode",{parentName:"li"},"shapes"),") zur\xfcckgeben, die mindestens den eingehenden\nFl\xe4cheninhalt aufweisen")),(0,t.kt)("h2",{id:"beispielhafter-aufbau-der-formendatei"},"Beispielhafter Aufbau der Formendatei"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"Circle;4\nSquare;5\nRectangle;3;4\nRectangle;1;7\nCircle;2\nCircle;3\n")))}d.isMDXComponent=!0}}]);