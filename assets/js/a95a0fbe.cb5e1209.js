"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[9347],{5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(4334);const s={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>y});var a=n(7462),r=n(7294),s=n(4334),l=n(2466),i=n(6775),u=n(1980),o=n(7392),d=n(12);function c(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,o.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function b(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=m(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!b({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[u,o]=p({queryString:n,groupId:a}),[c,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,d.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),h=(()=>{const e=u??c;return b({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!b({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),o(e),f(e)}),[o,f,s]),tabValues:s}}var h=n(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:i,selectValue:u,tabValues:o}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),m=e=>{const t=e.currentTarget,n=d.indexOf(t),a=o[n].value;a!==i&&(c(t),u(a))},b=e=>{var t;let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},o.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:b,onClick:m},l,{className:(0,s.Z)("tabs__item",g.tabItem,null==l?void 0:l.className,{"tabs__item--active":i===t})}),n??t)})))}function E(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=f(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",g.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(E,(0,a.Z)({},e,t)))}function y(e){const t=(0,h.Z)();return r.createElement(w,(0,a.Z)({key:String(t)},e))}},7833:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(7294),r=n(4866),s=n(5162),l=n(9960),i=n(614);function u(e){let{pullRequest:t,branchSuffix:n}=e;return a.createElement(r.Z,null,a.createElement(s.Z,{value:"exercise",label:"Exercise",default:!0},a.createElement(i.Z,{language:"console"},`git switch exercises/${n}`),a.createElement(l.Z,{to:`https://gitpod.io/#https://github.com/jappuccini/java-exercises/blob/exercises/${n}/Exercise.java`},a.createElement("img",{alt:"Open in Gitpod",src:"https://gitpod.io/button/open-in-gitpod.svg"}))),a.createElement(s.Z,{value:"solution",label:"Solution"},a.createElement(i.Z,{language:"console"},`git switch solutions/${n}`),a.createElement(l.Z,{to:`https://gitpod.io/#https://github.com/jappuccini/java-exercises/blob/solutions/${n}/Exercise.java`},a.createElement("img",{alt:"Open in Gitpod",src:"https://gitpod.io/button/open-in-gitpod.svg"}))),a.createElement(s.Z,{value:"pullrequest",label:"Pull Request"},"Alle \xa0\xc4nderungen zwischen der Aufgabe und der L\xf6sung findest du im Pull Request "," ",a.createElement(l.Z,{to:`https://github.com/jappuccini/java-exercises/pull/${t}/files?diff=split`},"PR#",t)))}},9729:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>b,frontMatter:()=>l,metadata:()=>u,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),s=n(7833);const l={title:"Lambdas02",description:""},i=void 0,u={unversionedId:"exercises/lambdas/lambdas02",id:"exercises/lambdas/lambdas02",title:"Lambdas02",description:"",source:"@site/docs/exercises/lambdas/lambdas02.md",sourceDirName:"exercises/lambdas",slug:"/exercises/lambdas/lambdas02",permalink:"/java-docs/exercises/lambdas/lambdas02",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/exercises/lambdas/lambdas02.md",tags:[],version:"current",frontMatter:{title:"Lambdas02",description:""},sidebar:"exercisesSidebar",previous:{title:"Lambdas01",permalink:"/java-docs/exercises/lambdas/lambdas01"},next:{title:"Lambdas03",permalink:"/java-docs/exercises/lambdas/lambdas03"}},o={},d=[],c={toc:d},m="wrapper";function b(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Es gibt 2 Klassen, die verhindern, dass bestimmte Objekte in der Liste\ngespeichert werden. In der Klasse FilteredAdultStudents werden nur Studenten\nder internen ArrayList hinzugef\xfcgt, sofern der Student mindestens 18 Jahre alt\nist. In der Klasse FilteredTeenStudents werden nur Studenten der internen\nArrayList hinzugef\xfcgt, sofern der Student unter 18 Jahre alt ist.\nIn der Example.java wird ein Erwachsener Student und ein jugendlicher Student\nerzeugt. Beide Studenten werden beiden FilteredStudents Klassen hinzugef\xfcgt und\nanschlie\xdfend ausgegeben. Die gefilterten Listen funktionieren, jedoch nicht\nflexibel. Schreibe eine Klasse, mit folgenden Anforderungen:"),(0,r.kt)("p",null,"Die Klasse soll FilteredStudents hei\xdfen. Sie soll ein privates Attribut students\nvom Typ ArrayList","<","Student",">"," haben. Weiterhin soll in einem privaten Attribut mandatoryFilter\neine Lambdafunktion vom Typ Predicate","<","Student",">"," definiert werden.\nErstelle einen Konstruktor der einen Parameter filter vom Typ Predicate","<","Student",">","\nenth\xe4lt. Der Konstruktor soll alle Attribute initialisieren. Die Methode add\nsoll vor dem Hinzuf\xfcgen des Elements mit Hilfe des mandatoryFilters \xfcberpr\xfcfen,\nob das eingehende Element hinzugef\xfcgt werden kann. Falls es hinzugef\xfcgt werden\nkann soll es der internen ArrayList hinzugef\xfcgt werden. Kopiere die\nprintStudents Methode von einem der beiden bestehenden Klassen.\nL\xf6sche die Klassen FilteredTeenStudents und FilteredAdultStudents. Verwende in\nder Klasse Exercise.java nur noch die FilteredStudents Klasse und \xfcbergebe dem\nKonstruktor jeweils die richtigen Lambdafunktionen, damit es gleich funktioniert\nwie davor."),(0,r.kt)(s.Z,{pullRequest:"68",branchSuffix:"lambdas/02",mdxType:"Exercise"}))}b.isMDXComponent=!0}}]);