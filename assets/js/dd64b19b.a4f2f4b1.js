"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[1999],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),p=r,g=m["".concat(u,".").concat(p)]||m[p]||d[p]||i;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9540:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={title:"Aktivit\xe4tsdiagramme",description:"",sidebar_position:20,tags:["uml","activity-diagrams"]},o=void 0,l={unversionedId:"documentation/uml/activity-diagrams",id:"documentation/uml/activity-diagrams",title:"Aktivit\xe4tsdiagramme",description:"",source:"@site/docs/documentation/uml/activity-diagrams.md",sourceDirName:"documentation/uml",slug:"/documentation/uml/activity-diagrams",permalink:"/java-docs/documentation/uml/activity-diagrams",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/documentation/uml/activity-diagrams.md",tags:[{label:"uml",permalink:"/java-docs/tags/uml"},{label:"activity-diagrams",permalink:"/java-docs/tags/activity-diagrams"}],version:"current",sidebarPosition:20,frontMatter:{title:"Aktivit\xe4tsdiagramme",description:"",sidebar_position:20,tags:["uml","activity-diagrams"]},sidebar:"documentationSidebar",previous:{title:"Klassendiagramme",permalink:"/java-docs/documentation/uml/class-diagrams"},next:{title:"Vererbung",permalink:"/java-docs/documentation/inheritance"}},u={},s=[],c={toc:s},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Aktivit\xe4tsdiagramme sind ein Diagrammtyp der UML und geh\xf6ren dort zum Bereich der Verhaltensdiagramme. Der Fokus von Aktivit\xe4tsdiagrammen liegt auf imperativen Verarbeitungsaspekten. Eine Aktivit\xe4t stellt einen gerichteten Graphen dar, der \xfcber Knoten (Aktionen,\nDatenknoten und Kontrollknoten) und Kanten (Kontrollfl\xfcsse und Datenfl\xfcsse) verf\xfcgt:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Aktionen sind elementare Bausteine f\xfcr beliebiges, benutzerdefiniertes Verhalten"),(0,r.kt)("li",{parentName:"ul"},"Kontrollknoten steuern den Kontroll- und Datenfluss in einer Aktivit\xe4t:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Startknoten: legen den Beginn der Aktivit\xe4t fest"),(0,r.kt)("li",{parentName:"ul"},"Endknoten: legen das Ende der Aktivit\xe4t fest"),(0,r.kt)("li",{parentName:"ul"},"Ablaufendknoten: legen das Ende eines Ablaufes fest"),(0,r.kt)("li",{parentName:"ul"},"Verzweigungsknoten: erm\xf6glichen die Verzweigung von Abl\xe4ufen"),(0,r.kt)("li",{parentName:"ul"},"Zusammenf\xfchrungsknoten: erm\xf6glichen die Zusammenf\xfchrung von Abl\xe4ufen"))),(0,r.kt)("li",{parentName:"ul"},"Datenknoten sind Hilfsknoten, die als ein- oder ausgehende Parameter einer Aktion verwendet werden k\xf6nnen"),(0,r.kt)("li",{parentName:"ul"},"Kontroll- und Datenfl\xfcsse legen Abl\xe4ufe zwischen Vorg\xe4nger- und Nachfolger-Knoten fest")),(0,r.kt)("mermaid",{value:'stateDiagram-v2\n    state "Eingabe: 1. Zahl" as input1\n    state "Eingabe: 2. Zahl" as input2\n    state "Ausgabe: 1. Zahl eingeben" as output1\n    state "Ausgabe: 2. Zahl eingeben" as output2\n    state "R\xfcckgabe: 1. Zahl : 2. Zahl" as activity1\n    state if <<choice>>\n    [*] --\x3e output1\n    output1 --\x3e input1\n    input1 --\x3e output2\n    output2 --\x3e input2\n    input2 --\x3e if\n    if --\x3e output2 : 2. Zahl ist gleich 0\n    if --\x3e activity1: 2. Zahl ist ungleich 0\n    activity1 --\x3e [*]'}))}d.isMDXComponent=!0}}]);