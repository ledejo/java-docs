"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[6071],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),p=i,f=d["".concat(l,".").concat(p)]||d[p]||m[p]||a;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:i,s[1]=o;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4883:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={title:"Softwaretests",description:"",sidebar_position:310,tags:[]},s=void 0,o={unversionedId:"documentation/tests",id:"documentation/tests",title:"Softwaretests",description:"",source:"@site/docs/documentation/tests.md",sourceDirName:"documentation",slug:"/documentation/tests",permalink:"/java-docs/documentation/tests",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/documentation/tests.md",tags:[],version:"current",sidebarPosition:310,frontMatter:{title:"Softwaretests",description:"",sidebar_position:310,tags:[]},sidebar:"documentationSidebar",previous:{title:"Die Java Stream API",permalink:"/java-docs/documentation/java-stream-api"},next:{title:"Komponententests (Unit Tests)",permalink:"/java-docs/documentation/unit-tests"}},l={},u=[{value:"Testarten",id:"testarten",level:2},{value:"Testgetriebe Entwicklung (Test Driven Development)",id:"testgetriebe-entwicklung-test-driven-development",level:2},{value:"Test Doubles",id:"test-doubles",level:2}],c={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Softwaretests sollen sicherstellen, dass bei der Entwicklung oder \xc4nderung einer Software der Quellcode in allen festgelegten Anwendungsf\xe4llen korrekt funktioniert. Mit Hilfe von Softwaretests k\xf6nnen Softwareentwickler im Idealfall schon w\xe4hrend des\nEntwicklungsprozesses m\xf6gliche Fehler identifizieren und beheben."),(0,i.kt)("h2",{id:"testarten"},"Testarten"),(0,i.kt)("p",null,"Man unterscheidet bei Softwaretests zwischen verschiedenen Testarten, die in der Testpyramide dargestellt werden:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Akzeptanztests: Testen des gesamten Systems unter realit\xe4tsgetreuen Bedingungen"),(0,i.kt)("li",{parentName:"ul"},"Systemtests: Testen des gesamten Systems"),(0,i.kt)("li",{parentName:"ul"},"Integrationstests: Testen mehrerer, voneinander abh\xe4ngiger Komponenten"),(0,i.kt)("li",{parentName:"ul"},"Komponententests: Testen einzelner, abgeschlossener Softwarebausteine")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/47243617/209136099-fb19c504-1394-4781-87d6-20811bc274f3.png",alt:"image"})),(0,i.kt)("h2",{id:"testgetriebe-entwicklung-test-driven-development"},"Testgetriebe Entwicklung (Test Driven Development)"),(0,i.kt)("p",null,"Komponententests (Unit Tests) spielen vor allem bei der Testgetriebenen Entwicklung (Test Driven Development) eine gro\xdfe Rolle. Hierbei werden Anwendungen Schritt f\xfcr Schritt (also inkrementell) um neue Funktionen erweitert (Red-Green-Refactor-Methode):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Red: Einen Test schreiben, der zun\xe4chst fehlschl\xe4gt"),(0,i.kt)("li",{parentName:"ul"},"Green: Genau soviel Produktivcode schreiben, damit der Test erfolgreich durchl\xe4uft"),(0,i.kt)("li",{parentName:"ul"},"Refactor: Testcode und Produktivcode aufr\xe4umen (vereinfachen und verbessern)")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/47243617/209136163-fd99c88b-6864-41fd-9b13-129a964ab2c3.png",alt:"image"})),(0,i.kt)("admonition",{title:"Hinweis",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Da durch die vorangestellten Tests eine kontinuierliche Designverbesserung stattfindet, wird die Testgetriebene Entwicklung zu den Designstrategien gez\xe4hlt.")),(0,i.kt)("h2",{id:"test-doubles"},"Test Doubles"),(0,i.kt)("p",null,"Oftmals werden zum Testen einer Methode andere Objekte bzw. Komponenten ben\xf6tigt, die vom Test bereitgestellt werden m\xfcssen. Zum Testen k\xf6nnen entweder die realen Komponenten, oder aber sogenannte ",(0,i.kt)("strong",{parentName:"p"},"Test Doubles")," verwendet werden:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Eine ",(0,i.kt)("em",{parentName:"li"},"F\xe4lschung")," (Fake) imitiert eine reale Komponente"),(0,i.kt)("li",{parentName:"ul"},"Eine ",(0,i.kt)("em",{parentName:"li"},"Attrappe")," (Dummy) ist ein Platzhalter f\xfcr ein Objekt, welches im Test nicht ben\xf6tigt wird"),(0,i.kt)("li",{parentName:"ul"},"Ein ",(0,i.kt)("em",{parentName:"li"},"Stummel")," (Stub) gibt bei Aufruf einen festen Wert zur\xfcck; wird also f\xfcr eingehende Aufrufe verwendet"),(0,i.kt)("li",{parentName:"ul"},"Eine ",(0,i.kt)("em",{parentName:"li"},"Nachahmung")," (Mock) zeichnet die Methodenaufrufe an ihr auf und kann zur\xfcckgeben, welche Methode wie oft mit welchen Parametern aufgerufen wurde; wird also f\xfcr ausgehende Aufrufe verwendet"),(0,i.kt)("li",{parentName:"ul"},"Ein ",(0,i.kt)("em",{parentName:"li"},"Spion")," (Spy) kann \xe4hnlich wie eine Nachahmung Methodenaufrufe aufzeichnen, kann diese aber auch die reale Komponente weiterleiten")),(0,i.kt)("p",null,"Test Doubles sollen die Abh\xe4ngigkeiten des SUT (System under Test) minimieren und f\xfcr vorhersagbare Ergebnisse sorgen."))}m.isMDXComponent=!0}}]);