"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[6405],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(o.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),u=r,f=d["".concat(o,".").concat(u)]||d[u]||m[u]||i;return t?a.createElement(f,s(s({ref:n},p),{},{components:t})):a.createElement(f,s({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=u;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[d]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<i;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4828:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const i={title:"Stellenangebot",description:"",tags:["inheritance","polymorphy","exceptions","records","io-streams"]},s=void 0,l={unversionedId:"exam-exercises/exam-exercises-java2/job-offer",id:"exam-exercises/exam-exercises-java2/job-offer",title:"Stellenangebot",description:"",source:"@site/docs/exam-exercises/exam-exercises-java2/job-offer.md",sourceDirName:"exam-exercises/exam-exercises-java2",slug:"/exam-exercises/exam-exercises-java2/job-offer",permalink:"/java-docs/exam-exercises/exam-exercises-java2/job-offer",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/exam-exercises/exam-exercises-java2/job-offer.md",tags:[{label:"inheritance",permalink:"/java-docs/tags/inheritance"},{label:"polymorphy",permalink:"/java-docs/tags/polymorphy"},{label:"exceptions",permalink:"/java-docs/tags/exceptions"},{label:"records",permalink:"/java-docs/tags/records"},{label:"io-streams",permalink:"/java-docs/tags/io-streams"}],version:"current",frontMatter:{title:"Stellenangebot",description:"",tags:["inheritance","polymorphy","exceptions","records","io-streams"]},sidebar:"examExercisesSidebar",previous:{title:"Personalverwaltung",permalink:"/java-docs/exam-exercises/exam-exercises-java2/human-resources"},next:{title:"Lego-Baustein",permalink:"/java-docs/exam-exercises/exam-exercises-java2/lego-brick"}},o={},c=[{value:"Klassendiagramm",id:"klassendiagramm",level:2},{value:"Allgemeine Hinweise",id:"allgemeine-hinweise",level:2},{value:"Hinweis zur Klasse Applicant",id:"hinweis-zur-klasse-applicant",level:2},{value:"Hinweis zur Klasse JobOffer",id:"hinweis-zur-klasse-joboffer",level:2},{value:"Hinweis zur Klasse JobOfferReader",id:"hinweis-zur-klasse-jobofferreader",level:2},{value:"Beispielhafter Aufbau der Stellenangebotsdatei",id:"beispielhafter-aufbau-der-stellenangebotsdatei",level:2}],p={toc:c},d="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Setze das abgebildete Klassendiagramm vollst\xe4ndig um. Erstelle zum Testen eine\nausf\xfchrbare Klasse und/oder eine Testklasse."),(0,r.kt)("h2",{id:"klassendiagramm"},"Klassendiagramm"),(0,r.kt)("mermaid",{value:"classDiagram\n    Person <|-- Recruiter\n    Person <|-- Applicant\n    JobOffer o-- Recruiter\n    JobOffer o-- Applicant\n    Applicant o-- ApplicationDocument\n\n    class JobOffer {\n        <<record>>\n        -id int\n        -title String\n        -recruiter Recruiter\n        -applicants List~Applicant~\n        +addApplicant(applicant Applicant) void\n    }\n\n    class Person {\n        <<abstract>>\n        -name String\n        -birthdateTimeStamp long\n        +Person(name String, birthdateTimeStamp long)\n    }\n\n    class Applicant {\n        -applicantId int\n        -applicationDocuments List~ApplicationDocument~\n        +Applicant(name String, birthdateTimeStamp long, applicantId int)\n        +addApplicationDocument(applicationDocument ApplicationDocument) void\n    }\n\n    class Recruiter {\n        +Recruiter(name String, birthdateTimeStamp long)\n    }\n\n    class ApplicationDocument {\n        <<record>>\n        -description String\n        -type String\n        -document File\n    }\n\n    class JobOfferReader {\n        +getJobOffers(file File)$ List~JobOffer~\n    }"}),(0,r.kt)("h2",{id:"allgemeine-hinweise"},"Allgemeine Hinweise"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Aus Gr\xfcnden der \xdcbersicht werden im Klassendiagramm keine Getter und\nObject-Methoden dargestellt"),(0,r.kt)("li",{parentName:"ul"},"So nicht anders angegeben, sollen Konstruktoren, Setter, Getter sowie die\nObject-Methoden wie gewohnt implementiert werden")),(0,r.kt)("h2",{id:"hinweis-zur-klasse-applicant"},"Hinweis zur Klasse Applicant"),(0,r.kt)("p",null,"Die Methode\n",(0,r.kt)("inlineCode",{parentName:"p"},"void addApplicationDocument(applicationDocument: ApplicationDocument)")," soll den\nBewerbungsunterlagen (",(0,r.kt)("inlineCode",{parentName:"p"},"applicationDocuments"),") das eingehende Dokument\nhinzuf\xfcgen."),(0,r.kt)("h2",{id:"hinweis-zur-klasse-joboffer"},"Hinweis zur Klasse JobOffer"),(0,r.kt)("p",null,"Die Methode ",(0,r.kt)("inlineCode",{parentName:"p"},"void addApplicant(applicant: Applicant)")," soll der Bewerberliste\n(",(0,r.kt)("inlineCode",{parentName:"p"},"applicants"),") den eingehenden Bewerber hinzuf\xfcgen."),(0,r.kt)("h2",{id:"hinweis-zur-klasse-jobofferreader"},"Hinweis zur Klasse JobOfferReader"),(0,r.kt)("p",null,"Die statische Methode ",(0,r.kt)("inlineCode",{parentName:"p"},"List<JobOffer> getJobOffers(file: File)")," soll die\nStellenangebote der eingehenden Datei zur\xfcckgeben. Die Ausnahme\n",(0,r.kt)("inlineCode",{parentName:"p"},"FileNotFoundException")," soll dabei weitergeleitet werden."),(0,r.kt)("h2",{id:"beispielhafter-aufbau-der-stellenangebotsdatei"},"Beispielhafter Aufbau der Stellenangebotsdatei"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"285;Senior Developer Java\n392;Associate Consultant SAP\n430;Expert Developer Java\n")))}m.isMDXComponent=!0}}]);