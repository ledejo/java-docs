"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[2977],{3905:(e,n,r)=>{r.d(n,{Zo:()=>g,kt:()=>m});var a=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var s=a.createContext({}),d=function(e){var n=a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},g=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),c=d(r),p=t,m=c["".concat(s,".").concat(p)]||c[p]||u[p]||i;return r?a.createElement(m,l(l({ref:n},g),{},{components:r})):a.createElement(m,l({ref:n},g))}));function m(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=r.length,l=new Array(i);l[0]=p;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:t,l[1]=o;for(var d=2;d<i;d++)l[d]=r[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},3385:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=r(7462),t=(r(7294),r(3905));const i={title:"Tiefgarage",description:"",tags:["oo","inheritance","polymorphy"]},l=void 0,o={unversionedId:"additional-material/exam-exercises1/parking-garage",id:"additional-material/exam-exercises1/parking-garage",title:"Tiefgarage",description:"",source:"@site/docs/additional-material/exam-exercises1/parking-garage.md",sourceDirName:"additional-material/exam-exercises1",slug:"/additional-material/exam-exercises1/parking-garage",permalink:"/java-docs/additional-material/exam-exercises1/parking-garage",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/additional-material/exam-exercises1/parking-garage.md",tags:[{label:"oo",permalink:"/java-docs/tags/oo"},{label:"inheritance",permalink:"/java-docs/tags/inheritance"},{label:"polymorphy",permalink:"/java-docs/tags/polymorphy"}],version:"current",frontMatter:{title:"Tiefgarage",description:"",tags:["oo","inheritance","polymorphy"]},sidebar:"additionalMaterialSidebar",previous:{title:"Geschenkesack",permalink:"/java-docs/additional-material/exam-exercises1/gift-bag"},next:{title:"Geometrische Form",permalink:"/java-docs/additional-material/exam-exercises1/shape"}},s={},d=[{value:"Klassendiagramm",id:"klassendiagramm",level:2},{value:"Allgemeine Hinweise",id:"allgemeine-hinweise",level:2},{value:"Hinweise zur Klasse ParkingGarage",id:"hinweise-zur-klasse-parkinggarage",level:2}],g={toc:d},c="wrapper";function u(e){let{components:n,...r}=e;return(0,t.kt)(c,(0,a.Z)({},g,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Setze das abgebildete Klassendiagramm vollst\xe4ndig um. Erstelle zum Testen eine ausf\xfchrbare Klasse."),(0,t.kt)("h2",{id:"klassendiagramm"},"Klassendiagramm"),(0,t.kt)("mermaid",{value:"classDiagram\n    ParkingGarage o-- ParkingSpot\n    ParkingSpot o-- Vehicle\n    Vehicle <|-- Car\n    Vehicle <|-- Bus\n\n    class ParkingSpot {\n        -vehicle Vehicle\n        -length double\n        -height double\n        -isForBusesOnly boolean\n        +ParkingSpot(length double, height double, isForBusesOnly boolean)\n    }\n\n    class Vehicle {\n        -make String\n        -model String\n        -length double\n        -height double\n        +Vehicle(make String, model String, length double, height double)\n    }\n\n    class Car {\n        +Car(make String, model String, length double, height double)\n    }\n\n    class Bus {\n        +Bus(make String, model String, length double, height double)\n    }\n\n    class ParkingGarage {\n        -parkingSpots ParkingSpot[]\n        +ParkingGarage(numberOfParkingSpots int)\n        +parkIn(car Car, parkingSpotNumber int) String\n        +parkOut(car Car) String\n        +getNextFreeParkingSpotNumber() int\n    }"}),(0,t.kt)("h2",{id:"allgemeine-hinweise"},"Allgemeine Hinweise"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Aus Gr\xfcnden der \xdcbersicht werden im Klassendiagramm keine Getter und Object-Methoden dargestellt"),(0,t.kt)("li",{parentName:"ul"},"So nicht anders angegeben, sollen Konstruktoren, Setter, Getter sowie die Object-Methoden wie gewohnt implementiert werden")),(0,t.kt)("h2",{id:"hinweise-zur-klasse-parkinggarage"},"Hinweise zur Klasse ParkingGarage"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"String parkIn(car: Car, parkingSpotNumber: int)")," soll das eingehende Fahrzeug dem Parkplatz mit der eingehenden Parkplatznummer zuweisen und eine enstprechende Erfolgsmeldung zur\xfcckgegeben. F\xfcr den Fall, dass der Parkplatz bereits besetzt ist, oder dass es sich bei dem eingehenden Fahrzeug um ein Auto handelt, der Parkplatz aber nur f\xfcr Busse ist, oder dass der Parkplatz zu klein ist, soll eine entsprechende Fehlermeldung zur\xfcckgegeben werden"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"String parkOut(car: Car)"),' soll das eingehende Fahrzeug "ausparken" und eine enstsprechende Erfolgsmeldung zur\xfcckgeben. F\xfcr den Fall, dass das Fahrzeug in der Tiefgarage nicht vorhanden ist, soll eine entsprechende Fehlermeldung zur\xfcckgegeben werden'),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"int getNextFreeParkingSpotNumber()")," soll die Nummer des n\xe4chsten freien Parkplatzes zur\xfcckgeben")))}u.isMDXComponent=!0}}]);