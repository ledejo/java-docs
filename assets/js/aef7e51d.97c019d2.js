"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[93],{3905:(e,r,n)=>{n.d(r,{Zo:()=>m,kt:()=>d});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=t.createContext({}),l=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},m=function(e){var r=l(e.components);return t.createElement(c.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},g=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=l(n),g=a,d=p["".concat(c,".").concat(g)]||p[g]||u[g]||i;return n?t.createElement(d,o(o({ref:r},m),{},{components:n})):t.createElement(d,o({ref:r},m))}));function d(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6208:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var t=n(7462),a=(n(7294),n(3905));const i={title:"Lego-Baustein",description:"",tags:["inheritance","polymorphy","interfaces","comparators"]},o=void 0,s={unversionedId:"exam-exercises/exam-exercises-java2/lego-brick",id:"exam-exercises/exam-exercises-java2/lego-brick",title:"Lego-Baustein",description:"",source:"@site/docs/exam-exercises/exam-exercises-java2/lego-brick.md",sourceDirName:"exam-exercises/exam-exercises-java2",slug:"/exam-exercises/exam-exercises-java2/lego-brick",permalink:"/java-docs/exam-exercises/exam-exercises-java2/lego-brick",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/exam-exercises/exam-exercises-java2/lego-brick.md",tags:[{label:"inheritance",permalink:"/java-docs/tags/inheritance"},{label:"polymorphy",permalink:"/java-docs/tags/polymorphy"},{label:"interfaces",permalink:"/java-docs/tags/interfaces"},{label:"comparators",permalink:"/java-docs/tags/comparators"}],version:"current",frontMatter:{title:"Lego-Baustein",description:"",tags:["inheritance","polymorphy","interfaces","comparators"]},sidebar:"examExercisesSidebar",previous:{title:"Stellenangebot",permalink:"/java-docs/exam-exercises/exam-exercises-java2/job-offer"},next:{title:"Bibliothek",permalink:"/java-docs/exam-exercises/exam-exercises-java2/library"}},c={},l=[{value:"Klassendiagramm",id:"klassendiagramm",level:2},{value:"Allgemeine Hinweise",id:"allgemeine-hinweise",level:2},{value:"Hinweis zur Klasse LegoBrickVolumeComparator",id:"hinweis-zur-klasse-legobrickvolumecomparator",level:2}],m={toc:l},p="wrapper";function u(e){let{components:r,...n}=e;return(0,a.kt)(p,(0,t.Z)({},m,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Setze das abgebildete Klassendiagramm vollst\xe4ndig um. Erstelle zum Testen eine ausf\xfchrbare Klasse und/oder eine Testklasse."),(0,a.kt)("h2",{id:"klassendiagramm"},"Klassendiagramm"),(0,a.kt)("mermaid",{value:"classDiagram\n    Lego <|-- LegoBrick\n    LegoBrick <|-- LegoBrick2x2x2\n    LegoBrick <|-- LegoBrick4x2x1\n    Comparator~T~ <|.. LegoBrickVolumeComparator\n\n    class Lego {\n        <<abstract>>\n        -id int\n        +Lego(id int)\n    }\n\n    class LegoBrick {\n        <<abstract>>\n        -dimensions int[3]\n        -color String\n        +LegoBrick(id int, dimensions int[3] color String)\n    }\n\n    class LegoBrick2x2x2 {\n        +LegoBrick2x2x2(id int, color String)\n    }\n\n    class LegoBrick4x2x1 {\n        +LegoBrick4x2x1(id int, color String)\n    }\n\n    class Comparator~T~ {\n        <<interface>>\n        +compare(o1 T, o2 T) int\n    }\n\n    class LegoBrickVolumeComparator {\n        +compare(legoBrick1 LegoBrick, legoBrick2 LegoBrick) int\n    }"}),(0,a.kt)("h2",{id:"allgemeine-hinweise"},"Allgemeine Hinweise"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Aus Gr\xfcnden der \xdcbersicht werden im Klassendiagramm keine Getter und Object-Methoden dargestellt"),(0,a.kt)("li",{parentName:"ul"},"So nicht anders angegeben, sollen Konstruktoren, Setter, Getter sowie die Object-Methoden wie gewohnt implementiert werden")),(0,a.kt)("h2",{id:"hinweis-zur-klasse-legobrickvolumecomparator"},"Hinweis zur Klasse LegoBrickVolumeComparator"),(0,a.kt)("p",null,"Die Methode ",(0,a.kt)("inlineCode",{parentName:"p"},"int compare(legoBrick1 LegoBrick, legoBrick2 LegoBrick)")," soll so implementiert werden, dass damit Lego-Bausteine aufsteigend nach ihrem Volumen sortiert werden k\xf6nnen."))}u.isMDXComponent=!0}}]);