"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[9080],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(a),p=r,f=m["".concat(o,".").concat(p)]||m[p]||u[p]||i;return a?n.createElement(f,s(s({ref:t},d),{},{components:a})):n.createElement(f,s({ref:t},d))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<i;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},3841:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={title:"Messdaten",description:"",tags:["java-stream-api"]},s=void 0,l={unversionedId:"additional-material/exam-exercises2/measurement-data",id:"additional-material/exam-exercises2/measurement-data",title:"Messdaten",description:"",source:"@site/docs/additional-material/exam-exercises2/measurement-data.md",sourceDirName:"additional-material/exam-exercises2",slug:"/additional-material/exam-exercises2/measurement-data",permalink:"/java-docs/additional-material/exam-exercises2/measurement-data",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/additional-material/exam-exercises2/measurement-data.md",tags:[{label:"java-stream-api",permalink:"/java-docs/tags/java-stream-api"}],version:"current",frontMatter:{title:"Messdaten",description:"",tags:["java-stream-api"]},sidebar:"additionalMaterialSidebar",previous:{title:"Bibliothek",permalink:"/java-docs/additional-material/exam-exercises2/library"},next:{title:"Planeten",permalink:"/java-docs/additional-material/exam-exercises2/planets"}},o={},c=[{value:"Quellcode",id:"quellcode",level:2}],d={toc:c},m="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Erstelle die Klasse ",(0,r.kt)("inlineCode",{parentName:"li"},"MeasurementData")," anhand des abgebildeten Quellcodes"),(0,r.kt)("li",{parentName:"ul"},"Erstelle eine ausf\xfchrbare Klasse, welche mit Hilfe der Java Stream API folgende Informationen auf der Konsole ausgibt:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"alle Messdaten aus einem bestimmtem Jahr der Kategorie F absteigend sortiert nach dem Prozentsatz"),(0,r.kt)("li",{parentName:"ul"},"der Durchschnitts-Prozentsatz aller Messdaten der Kategorie X"),(0,r.kt)("li",{parentName:"ul"},"alle Messdaten, bei denen die Temperatur im Sommer (Juni - August) bei mindestens 30\xb0 lag"),(0,r.kt)("li",{parentName:"ul"},"die Antwort auf die Frage, ob es einen Messdatensatz aus Deutschland, datiert nach dem 1. Januar eines bestimmten Jahres, mit einem Prozentsatz von mindestens 50% gibt"),(0,r.kt)("li",{parentName:"ul"},"die durchschnittliche Temperatur gruppiert nach L\xe4ndern"),(0,r.kt)("li",{parentName:"ul"},"die Anzahl aller Messdaten gruppiert nach den Prozentsatzbereichen (0-10, 10-20,\u2026)")))),(0,r.kt)("h2",{id:"quellcode"},"Quellcode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public record MeasurementData(String country, LocalDate date, double temperature, int percentage,\n    char category) {\n\n  private final static int NUMBER_OF_ENTRIES = 100;\n  private final static int MAX_DAYS = 2000;\n  private final static int MAX_TEMPERATURE = 40;\n  private final static int MAX_PERCENTAGE = 101;\n  private final static List<String> COUNTRIES =\n      List.of("USA", "Brasilien", "Deutschland", "Japan", "Indien");\n  private final static List<Character> CATEGORIES = List.of(\'D\', \'X\', \'F\');\n\n  public static ArrayList<MeasurementData> getMeasurementData() {\n    ArrayList<MeasurementData> measurementData = new ArrayList<>();\n\n    Random rnd = new Random();\n    LocalDate now = LocalDate.now();\n\n    for (int i = 0; i < NUMBER_OF_ENTRIES; i++) {\n      LocalDate date = now.minusDays(rnd.nextInt(MAX_DAYS));\n      double temperature = rnd.nextDouble(MAX_TEMPERATURE);\n      int percentage = rnd.nextInt(MAX_PERCENTAGE);\n      String country = COUNTRIES.get(rnd.nextInt(COUNTRIES.size()));\n      char category = CATEGORIES.get(rnd.nextInt(CATEGORIES.size()));\n      measurementData.add(new MeasurementData(country, date, temperature, percentage, category));\n    }\n\n    return measurementData;\n  }\n\n}\n')))}u.isMDXComponent=!0}}]);