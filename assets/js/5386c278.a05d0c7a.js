"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[3083],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),o=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=o(e.components);return a.createElement(u.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=o(t),c=r,k=d["".concat(u,".").concat(c)]||d[c]||m[c]||i;return t?a.createElement(k,l(l({ref:n},p),{},{components:t})):a.createElement(k,l({ref:n},p))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=c;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=t[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5237:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>u,metadata:()=>p,toc:()=>m});var a=t(7462),r=(t(7294),t(3905));const i=t.p+"assets/images/optionals-107747e6db3d97ecec463ef70feeecc4.png",l=t.p+"assets/images/lambdas-f8a84de54f3fd7519ee0c06c21cad0d5.png",s=t.p+"assets/images/streams-8476221e05c1c2802806cc90f7342225.png",u={title:"Steffen",description:"",sidebar_position:30,tags:[]},o=void 0,p={unversionedId:"additional-material/steffen",id:"additional-material/steffen",title:"Steffen",description:"",source:"@site/docs/additional-material/steffen.md",sourceDirName:"additional-material",slug:"/additional-material/steffen",permalink:"/java-docs/additional-material/steffen",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/additional-material/steffen.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{title:"Steffen",description:"",sidebar_position:30,tags:[]},sidebar:"additionalMaterialSidebar",previous:{title:"Daniel",permalink:"/java-docs/additional-material/daniel"}},d={},m=[{value:"Java I",id:"java-i",level:2},{value:"Java II",id:"java-ii",level:2},{value:"Demos",id:"demos",level:2},{value:"Klausurvorbereitung Java II",id:"klausurvorbereitung-java-ii",level:2},{value:"Aufgabe Optionals",id:"aufgabe-optionals",level:2},{value:"Klassendiagramm",id:"klassendiagramm",level:3},{value:"Aufgabe Lambdafunktionen",id:"aufgabe-lambdafunktionen",level:2},{value:"Klassendiagramm",id:"klassendiagramm-1",level:3},{value:"Aufgabe Streams",id:"aufgabe-streams",level:2},{value:"Klassendiagramm",id:"klassendiagramm-2",level:3},{value:"Hinweise zur Klasse PhoneStore",id:"hinweise-zur-klasse-phonestore",level:2},{value:"Klausurvorbereitung Java I",id:"klausurvorbereitung-java-i",level:2},{value:"08.03.2023",id:"08032023",level:3},{value:"14.03.2023",id:"14032023",level:3},{value:"Aufgabe Array",id:"aufgabe-array",level:4},{value:"Aufgabe Exception",id:"aufgabe-exception",level:4},{value:"21.03.2023",id:"21032023",level:3},{value:"Aufgabe abstrakte Klasse, Enum",id:"aufgabe-abstrakte-klasse-enum",level:4},{value:"Aufgabe Comparator",id:"aufgabe-comparator",level:4}],c={toc:m},k="wrapper";function g(e){let{components:n,...t}=e;return(0,r.kt)(k,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"java-i"},"Java I"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/intro"},"Einleitung")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/datatypes-and-dataobjects"},"Datentypen und Datenobjekte")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/methods-and-operators"},"Methoden und Operatoren")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/if-and-switch"},"Kontrollstrukturen und Arrays")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/math-random-scanner"},"Math, Random und Scanner")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/classes-and-objects"},"Klassen und Objekte")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/constructor-and-static"},"Konstruktor und static")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/class-diagram-java-api-enum"},"Java API, Enum, Klassendiagramm, Aktivit\xe4tsdiagramm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/Inheritance"},"Vererbung")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/polymorphy"},"Polymorphie")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/abstract-and-final"},"Abstrakte und finale Klassen")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/interfaces"},"Interfaces")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/exceptions"},"Exceptions"))),(0,r.kt)("h2",{id:"java-ii"},"Java II"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/recap"},"Wiederholung und Klausurbesprechung 10.08.23")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/lambda"},"Innere Klassen und Lambda Funktionen 17.08.23")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/records-optionals"},"Records und Optionals 18.08.23")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/generics-maps"},"Generics und Maps 24.08.23")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/stream-api"},"Stream API 31.08.23 & 01.09.23")),(0,r.kt)("li",{parentName:"ul"},"Probeklausur 07.09.23"),(0,r.kt)("li",{parentName:"ul"},"Probeklausur 14.09.23")),(0,r.kt)("h2",{id:"demos"},"Demos"),(0,r.kt)("p",null,"Die Endergebnisse der Demos findet ihr in folgendem Branch:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git switch demos/steffen\n")),(0,r.kt)("h2",{id:"klausurvorbereitung-java-ii"},"Klausurvorbereitung Java II"),(0,r.kt)("a",{href:"/java-docs/pdf/java-cheat-sheet.pdf",target:"_blank"},"Cheatsheet"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Altklausuren 2022 Q3 - Klausur Java 2 Aufgabe 3")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class PlanetQueries {\n\n    public static ArrayList<Planet> planets = Planet.getPlantes();\n\n    public static void a() {\n        PlanetQueries.planets.stream()\n          .filter(p -> p.moons() > 5)\n          .forEach(p -> {\n              System.out.println(p.name() + ": " + p.moons());\n          });\n    }\n\n    public static OptionalDouble b() {\n        return PlanetQueries.planets.stream()\n          .filter(p -> p.type() == Type.GAS_PLANET)\n          .mapToDouble(p -> p.diameter())\n          .average();\n    }\n\n    public static List<Planet> c() {\n        return PlanetQueries.planets.stream()\n          .sorted((p1, p2) -> Double.compare(p2.mass(), p1.mass()))\n          .toList();\n    }\n\n    public static boolean d() {\n        return PlanetQueries.planets.stream()\n          .allMatch(p -> p.moons() > 0);\n    }\n\n    public static void e() {\n        Map<Type, List<Planet>> planetsMap = PlanetQueries.planets.stream()\n          .collect(Collectors.groupingBy(p -> p.type()));\n        planetsMap.entrySet()\n          .stream()\n          .forEach(entry -> {\n            System.out.println(entry.getKey() + ":" + entry.getValue());\n          });\n    }\n}\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Altklausuren 2022 Q3 - Probeklausur Java 2 Klausur Aufgabe 3"),(0,r.kt)("li",{parentName:"ol"},"Altklausuren 2023 Q1 - Wiederholklausur 2 Java 2 Klausur Aufgabe 3"),(0,r.kt)("li",{parentName:"ol"},"Altklausuren 2023 Q1 - Wiederholklausur Java 2 Klausur Aufgabe 3")),(0,r.kt)("h2",{id:"aufgabe-optionals"},"Aufgabe Optionals"),(0,r.kt)("h3",{id:"klassendiagramm"},"Klassendiagramm"),(0,r.kt)("img",{src:i}),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zu den Konstruktoren")," ",(0,r.kt)("br",null),"\nDie Konstruktoren sollen alle Attribute initialisieren."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Methode toString ")," ",(0,r.kt)("br",null),"\nDie Methode toString soll die Attribute brand, model und addition zur\xfcckgeben.\nDie Attribute sollen durch eine Leertaste getrennt sein. Falls addition keinen\nWert besitz, soll dieser ignoriert werden."),(0,r.kt)("p",null,'Erstelle eine ausf\xfchrbare Klasse in der ein Auto mit der Marke "Mercedes",\ndem Modell "CLA45" und dem Zusatz "AMG" initialisiert wird.\nGib das Auto in der Konsole aus. Entferne den Zusatz von dem Auto und gebe\ndas Auto erneut in der Konsole aus.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class Car {\n    public String name;\n    public String brand;\n    public Optional<String> addition;\n\n    public Car(String name, String brand) {\n        this.name = name;\n        this.brand = brand;\n        this.addition = Optional.empty();\n    }\n\n    public Car(String name, String brand, String addition) {\n        this.name = name;\n        this.brand = brand;\n        this.addition = Optional.ofNullable(addition);\n    }\n\n    public String toString() {\n        if (addition.isPresent()) {\n            return brand + " " + name + addition.get();\n        } else {\n            return brand + " " + name;\n        }\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class Main {\n    public static void main(String[] args) {\n        Car benz = new Car("CLA45", "Mercedes", "AMG");\n        System.out.println(benz.toString());\n        benz.addition = Optional.empty();\n        System.out.println(benz.toString());\n    }\n}\n')),(0,r.kt)("h2",{id:"aufgabe-lambdafunktionen"},"Aufgabe Lambdafunktionen"),(0,r.kt)("h3",{id:"klassendiagramm-1"},"Klassendiagramm"),(0,r.kt)("img",{src:l}),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse Helper")," ",(0,r.kt)("br",null),"\nIm Klassendiagramm sind keine R\xfcckgabetypen f\xfcr die\nstatischen Attribute angegeben. Gib f\xfcr jedes Attribut\nden geeigneten Typ an."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Das Attribut ",(0,r.kt)("strong",{parentName:"li"},"isNewBorn")," soll eine Lambdafunktion enthalten die ermittelt, ob ein Tier j\xfcnger als 1 Jahr alt ist."),(0,r.kt)("li",{parentName:"ul"},"Das Attribut ",(0,r.kt)("strong",{parentName:"li"},"toOutput"),' soll eine Lambdafunktion enthalten, die ein Tier in folgenden String konvertiert: "firstName lastName ist size Zentimeter gro\xdf."'),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("strong",{parentName:"li"},"isHigherThan")," soll eine Lambdafunktion zur\xfcckgeben, die abh\xe4ngig vom Parameter size \xfcberpr\xfcft, ob ein Tier gr\xf6\xdfer als die angegebene Gr\xf6\xdfe ist.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Hinweise zur Klasse Data")," ",(0,r.kt)("br",null)),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("strong",{parentName:"li"},"getAnimals")," soll einen Stream von einem einzelnen Tier mit den Werten deiner Wahl zur\xfcckgeben.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Hinweise zur Klasse Task2")," ",(0,r.kt)("br",null),"\nVerwende f\xfcr die nachfolgende Abfolge die Methoden der Klassen Data und Helper.\nErzeuge einen Stream von Tieren und filtere jene heraus, die Gr\xf6\xdfer als 50 Zentimeter sind.\nGib anschlie\xdfend den vollen Namen und die Gr\xf6\xdfe der Tiere in der Konsole aus."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public record Animal(String firstName, String lastName, int age, int size) {}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class Data {\n    public static Stream<Animal> getAnimals() {\n        return Stream.of(new Animal("Steffen", "Merk", 28, 170));\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class Helper {\n    public static Predicate<Animal> isNewBorn = animal -> animal.age() < 1;\n    public static Function<Animal, String> toOutput = animal -> animal.firstName()\n            + " " + animal.lastName() + " ist " + animal.size() + " Zentimeter gro\xdf";\n\n    public static Predicate<Animal> isHigherThan(int size) {\n        return animal -> animal.size() > size;\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class Task2 {\n    public static void main(String[] args) {\n        Data.getAnimals()\n                .filter(Helper.isHigherThan(50))\n                .map(Helper.toOutput)\n                .forEach(System.out::println);\n    }\n}\n")),(0,r.kt)("h2",{id:"aufgabe-streams"},"Aufgabe Streams"),(0,r.kt)("h3",{id:"klassendiagramm-2"},"Klassendiagramm"),(0,r.kt)("img",{src:s}),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class PhoneStore {\n  private ArrayList<Phone> phones;\n\n  public PhoneStore(ArrayList<Phone> phones) {\n    this.phones = phones;\n  }\n\n  public List<Phone> q1() {\n    return phones.stream()\n        .filter(p -> p.brand() == Brand.HUAWEI)\n        .filter(p -> p.cameras() > 3)\n        .sorted((p1, p2) -> Integer.compare(p2.cpuPower(), p1.cpuPower()))\n        .limit(3)\n        .sorted((p1, p2) -> Double.compare(p2.price(), p1.price()))\n        .toList();\n  }\n\n  public OptionalDouble q2() {\n    return phones.stream()\n        .filter(p -> p.batterySize() > 2500)\n        .mapToInt(p -> p.cameras())\n        .average();\n  }\n\n  public List<Phone> q3(double maxPrice) {\n    return phones.stream()\n        .filter(p -> p.price() <= maxPrice)\n        .filter(p -> p.connectionType().isModern())\n        .filter(p -> p.cpuPower() < 2400)\n        .sorted((p1, p2) -> Double.compare(p1.price(), p2.price()))\n        .toList();\n  }\n\n  public Map<String, Phone> q4() {\n    return phones.stream()\n        .collect(Collectors.toMap(\n            p -> p.brand().name() + p.connectionType().name(),\n            p -> p));\n  }\n\n  public Map<ConnectionType, List<Phone>> q5() {\n    return phones.stream()\n        .collect(Collectors.groupingBy(p -> p.connectionType()));\n  }\n\n}\n")),(0,r.kt)("h2",{id:"hinweise-zur-klasse-phonestore"},"Hinweise zur Klasse PhoneStore"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren."),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("strong",{parentName:"li"},"q1")," soll die drei Leistungsst\xe4rksten (CPU Power) Smart Phones der Marke Huawei, absteigend nach dem Preis zur\xfcckgeben, welche mehr als 3 Kameras haben."),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("strong",{parentName:"li"},"q2")," soll die durchschnittliche Kameraanzahl aller Smart Phones zur\xfcckgeben, die einen Akku von 2500 oder mehr haben."),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("strong",{parentName:"li"},"q3")," soll die Smart Phones aufsteigend nach Preis zur\xfcckgeben, die den ",(0,r.kt)("strong",{parentName:"li"},"maxPrice")," nicht \xfcberschreiten, einen modernen Anschlusstyp haben und weniger als 2400 Leistung (CPU Power) haben."),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("strong",{parentName:"li"},"q4")," soll eine Map zur\xfcckgeben. Der Schl\xfcssel soll aus dem Markennamen und dem Anschlusstyp zusammengesetzt werden. Als Wert soll das Auto zur\xfcckgegeben werden."),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("strong",{parentName:"li"},"q5")," soll eine Map zur\xfcckgeben, welche alle Smart Phones nach Anschlusstyp gruppiert.")),(0,r.kt)("h2",{id:"klausurvorbereitung-java-i"},"Klausurvorbereitung Java I"),(0,r.kt)("h3",{id:"08032023"},"08.03.2023"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Aufgaben in der Probeklausur 2202_Q4 ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Aufgabe 1-a f\xfcr die Methode a"),(0,r.kt)("li",{parentName:"ul"},"Aufgabe 1-b"),(0,r.kt)("li",{parentName:"ul"},"Aufgabe 2"),(0,r.kt)("li",{parentName:"ul"},"Aufgabe 5")),(0,r.kt)("h3",{id:"14032023"},"14.03.2023"),(0,r.kt)("h4",{id:"aufgabe-array"},"Aufgabe Array"),(0,r.kt)("img",{style:{height:"200px"},src:"/java-docs/img/array_task.png"}),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Methode split ")," ",(0,r.kt)("br",null),"\nDie Methode split soll ein Array vom Typ int so verarbeiten, dass ein neues Array erstellt wird, was alle Elemente des\neingehenden Arrays bis zum angegebenen Index enth\xe4lt. Das neu erstellte Array soll anschlie\xdfend zur\xfcckgegeben werden.\nVerwende keine ArrayList!\nBsp.: Der Parameter numbers enth\xe4lt die Elemente 10, 8, 3, 22 & 1 der Parameter index ist gleich 2. Zur\xfcckgegeben\nwerden soll ein neues Array, das die Elemente 10, 8 & 3 enth\xe4lt."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Methode main ")," ",(0,r.kt)("br",null),"\nIn der Methode main soll ein Arrays erstellt werden, dass die Ganzzahlen 10, 8, 3, 22 & 1 enth\xe4lt.\nErstelle mithilfe der Methode split ein neues Array, dass die ersten drei Elemente des ersten Arrays enthalten soll.\nGib mithilfe einer For-Schleife alle Elemente des neu erstellten Arrays aus."),(0,r.kt)("h4",{id:"aufgabe-exception"},"Aufgabe Exception"),(0,r.kt)("img",{style:{height:"200px"},src:"/java-docs/img/exception_task.png"}),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse OverflowException ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren."),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("strong",{parentName:"li"},"getHigherThanCapacity")," soll die zu viel hinzugef\xfcgte Fl\xfcssigkeit zur\xfcckgeben.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse Barrel")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren. Das Fass ist Anfangs immer leer."),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("strong",{parentName:"li"},"addFluid")," soll die OverflowException ausl\xf6sen, wenn die Summe der eingehenden\nFl\xfcssigkeit und der im Fass befindenden Fl\xfcssigkeit die Kapazit\xe4t \xfcberschreitet. \xdcbergebe der Ausnahme\nden Wert, um wieviel die maximale Kapazit\xe4t \xfcberschritten wurde. Wenn die maximale Kapazit\xe4t nicht\n\xfcberschritten wird, soll die eingehende Fl\xfcssigkeit dem Fass hinzugef\xfcgt werden")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Zusatz in ausf\xfchrbarer Klasse ")," ",(0,r.kt)("br",null),"\nErstelle ein neues Fass, das die maximale Kapazit\xe4t von 100 hat. Versuche anschlie\xdfend das Fass auf 101 zu\nf\xfcllen und fange die Ausnahme ab. Gib in der Konsole aus, um wieviel die maximale Kapazit\xe4t \xfcberschritten\nwurde.",(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"}," Beispiel Konsolenausgabe: ")," ",(0,r.kt)("br",null),'\n"Es w\xe4re um 1 zu viel bef\xfcllt worden."'),(0,r.kt)("h3",{id:"21032023"},"21.03.2023"),(0,r.kt)("h4",{id:"aufgabe-abstrakte-klasse-enum"},"Aufgabe abstrakte Klasse, Enum"),(0,r.kt)("img",{style:{height:"200px"},src:"/java-docs/img/class_task.png"}),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse EnergySource ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Erstelle die zwei Konstanten Batterie und Steckdose f\xfcr die Arten einer\nEnergiequelle."),(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren."),(0,r.kt)("li",{parentName:"ul"},"Die Methode getType soll den Typ der Energiequelle zur\xfcckgeben."),(0,r.kt)("li",{parentName:"ul"},"Die Methode canBeUsedEverywhere soll true zur\xfcckgeben, wenn die Energiequelle\neine Batterie ist.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse Phone ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse CablePhone ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren."),(0,r.kt)("li",{parentName:"ul"},"Die Methode readyForUse soll true zur\xfcckgeben, wenn das Kabeltelefon\neingesteckt und eingeschalten ist.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse SmartPhone ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren."),(0,r.kt)("li",{parentName:"ul"},"Die Methode readyForUse soll true zur\xfcckgeben, wenn die Energie des\nSmartphones die minimal erforderliche Energie \xfcberschreitet.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse ExamTask04 ")," ",(0,r.kt)("br",null),"\nErzeuge ein Kabeltelefon mit Akku und eines, dass an die Steckdose\nangeschlossen ist. Erzeuge ein leeres Smartphone und eines das halb voll ist.\nSpeichere alle erzeugten Fahrzeuge in einer ArrayList. Ermittle mithilfe einer\nSchleife die Anzahl der betriebsbereiten Telefone. Gib die Anzahl in der\nKonsole aus."),(0,r.kt)("h4",{id:"aufgabe-comparator"},"Aufgabe Comparator"),(0,r.kt)("img",{style:{height:"200px"},src:"/java-docs/img/comparator_task.png"}),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse CarVendor ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren."),(0,r.kt)("li",{parentName:"ul"},"Die Methode sortByConstructionYear soll die Autos absteigend nach Baujahr\nsortieren."),(0,r.kt)("li",{parentName:"ul"},"Die Methode print soll das Baujahr aller Autos in der Konsole ausgeben.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse ConstructionYearComparator ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der ConstructionYearComparator soll das Comparator Interface implementieren\nund Autos absteigend nach Baujahr sortieren.")))}g.isMDXComponent=!0}}]);