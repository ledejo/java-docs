"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[9970],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),o=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=o(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=o(a),k=r,f=p["".concat(u,".").concat(k)]||p[k]||m[k]||l;return a?n.createElement(f,i(i({ref:t},d),{},{components:a})):n.createElement(f,i({ref:t},d))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var o=2;o<l;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},3503:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var n=a(7462),r=(a(7294),a(3905));const l={title:"Slides (Steffen)",description:"",sidebar_position:40,tags:[]},i=void 0,s={unversionedId:"additional-material/slides",id:"additional-material/slides",title:"Slides (Steffen)",description:"",source:"@site/docs/additional-material/slides.md",sourceDirName:"additional-material",slug:"/additional-material/slides",permalink:"/java-docs/additional-material/slides",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/additional-material/slides.md",tags:[],version:"current",sidebarPosition:40,frontMatter:{title:"Slides (Steffen)",description:"",sidebar_position:40,tags:[]},sidebar:"additionalMaterialSidebar",previous:{title:"Videosammlung",permalink:"/java-docs/additional-material/exam-exercises2/video-collection"}},u={},o=[{value:"Java I",id:"java-i",level:2},{value:"Java II",id:"java-ii",level:2},{value:"Demos",id:"demos",level:2},{value:"Klausurvorbereitung Java I",id:"klausurvorbereitung-java-i",level:2},{value:"08.03.2023",id:"08032023",level:3},{value:"14.03.2023",id:"14032023",level:3},{value:"Aufgabe Array",id:"aufgabe-array",level:4},{value:"Aufgabe Exception",id:"aufgabe-exception",level:4},{value:"21.03.2023",id:"21032023",level:3},{value:"Aufgabe abstrakte Klasse, Enum",id:"aufgabe-abstrakte-klasse-enum",level:4},{value:"Aufgabe Comparator",id:"aufgabe-comparator",level:4},{value:"Klausurvorbereitung Java II",id:"klausurvorbereitung-java-ii",level:2}],d={toc:o},p="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"java-i"},"Java I"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/intro"},"Einleitung")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/datatypes-and-dataobjects"},"Datentypen und Datenobjekte")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/methods-and-operators"},"Methoden und Operatoren")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/if-and-switch"},"Kontrollstrukturen und Arrays")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/math-random-scanner"},"Math, Random und Scanner")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/classes-and-objects"},"Klassen und Objekte")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/constructor-and-static"},"Konstruktor und static")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/class-diagram-java-api-enum"},"Java API, Enum, Klassendiagramm, Aktivit\xe4tsdiagramm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/Inheritance"},"Vererbung")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/polymorphy"},"Polymorphie")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/abstract-and-final"},"Abstrakte und finale Klassen")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/interfaces"},"Interfaces")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/exceptions"},"Exceptions"))),(0,r.kt)("h2",{id:"java-ii"},"Java II"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/recap"},"Wiederholung und Klausurbesprechung 10.08.23")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/lambda"},"Innere Klassen und Lambda Funktionen 17.08.23")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/records-optionals"},"Records und Optionals 18.08.23")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/generics-maps"},"Generics und Maps 24.08.23")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/tbd"},"Stream API 31.08.23")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/tbd"},"Unit Testing 01.09.23")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/tbd"},"Probeklausur 07.09.23")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/slides/steffen/tbd"},"Probeklausur 14.09.23"))),(0,r.kt)("h2",{id:"demos"},"Demos"),(0,r.kt)("p",null,"Die Endergebnisse der Demos findet ihr in folgendem Branch:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git switch demos/steffen\n")),(0,r.kt)("h2",{id:"klausurvorbereitung-java-i"},"Klausurvorbereitung Java I"),(0,r.kt)("h3",{id:"08032023"},"08.03.2023"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Aufgaben in der Probeklausur 2202_Q4 ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Aufgabe 1-a f\xfcr die Methode a"),(0,r.kt)("li",{parentName:"ul"},"Aufgabe 1-b"),(0,r.kt)("li",{parentName:"ul"},"Aufgabe 2"),(0,r.kt)("li",{parentName:"ul"},"Aufgabe 5")),(0,r.kt)("h3",{id:"14032023"},"14.03.2023"),(0,r.kt)("h4",{id:"aufgabe-array"},"Aufgabe Array"),(0,r.kt)("img",{style:{height:"200px"},src:"/java-docs/img/array_task.png"}),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Methode split ")," ",(0,r.kt)("br",null),"\nDie Methode split soll ein Array vom Typ int so verarbeiten, dass ein neues Array erstellt wird, was alle Elemente des\neingehenden Arrays bis zum angegebenen Index enth\xe4lt. Das neu erstellte Array soll anschlie\xdfend zur\xfcckgegeben werden.\nVerwende keine ArrayList!\nBsp.: Der Parameter numbers enth\xe4lt die Elemente 10, 8, 3, 22 & 1 der Parameter index ist gleich 2. Zur\xfcckgegeben\nwerden soll ein neues Array, das die Elemente 10, 8 & 3 enth\xe4lt. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Methode main ")," ",(0,r.kt)("br",null),"\nIn der Methode main soll ein Arrays erstellt werden, dass die Ganzzahlen 10, 8, 3, 22 & 1 enth\xe4lt.\nErstelle mithilfe der Methode split ein neues Array, dass die ersten drei Elemente des ersten Arrays enthalten soll.\nGib mithilfe einer For-Schleife alle Elemente des neu erstellten Arrays aus. "),(0,r.kt)("h4",{id:"aufgabe-exception"},"Aufgabe Exception"),(0,r.kt)("img",{style:{height:"200px"},src:"/java-docs/img/exception_task.png"}),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse OverflowException ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren. "),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("strong",{parentName:"li"},"getHigherThanCapacity")," soll die zu viel hinzugef\xfcgte Fl\xfcssigkeit zur\xfcckgeben. ")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse Barrel")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren. Das Fass ist Anfangs immer leer."),(0,r.kt)("li",{parentName:"ul"},"Die Methode ",(0,r.kt)("strong",{parentName:"li"},"addFluid")," soll die OverflowException\tausl\xf6sen, wenn die Summe der eingehenden\nFl\xfcssigkeit und der im Fass befindenden Fl\xfcssigkeit die Kapazit\xe4t \xfcberschreitet. \xdcbergebe der Ausnahme\nden Wert, um wieviel die maximale Kapazit\xe4t \xfcberschritten wurde. Wenn die maximale Kapazit\xe4t nicht\n\xfcberschritten wird, soll die eingehende Fl\xfcssigkeit dem Fass hinzugef\xfcgt werden")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Zusatz in ausf\xfchrbarer Klasse ")," ",(0,r.kt)("br",null),"\nErstelle ein neues Fass, das die maximale Kapazit\xe4t von 100 hat. Versuche anschlie\xdfend das Fass auf 101 zu\nf\xfcllen und fange die Ausnahme ab. Gib in der Konsole aus, um wieviel die maximale Kapazit\xe4t \xfcberschritten\nwurde.",(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"}," Beispiel Konsolenausgabe: ")," ",(0,r.kt)("br",null),'\n"Es w\xe4re um 1 zu viel bef\xfcllt worden." '),(0,r.kt)("h3",{id:"21032023"},"21.03.2023"),(0,r.kt)("h4",{id:"aufgabe-abstrakte-klasse-enum"},"Aufgabe abstrakte Klasse, Enum"),(0,r.kt)("img",{style:{height:"200px"},src:"/java-docs/img/class_task.png"}),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse EnergySource ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Erstelle die zwei Konstanten Batterie und Steckdose f\xfcr die Arten einer\nEnergiequelle."),(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren."),(0,r.kt)("li",{parentName:"ul"},"Die Methode getType soll den Typ der Energiequelle zur\xfcckgeben."),(0,r.kt)("li",{parentName:"ul"},"Die Methode canBeUsedEverywhere soll true zur\xfcckgeben, wenn die Energiequelle\neine Batterie ist.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse Phone ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse CablePhone ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren."),(0,r.kt)("li",{parentName:"ul"},"Die Methode readyForUse soll true zur\xfcckgeben, wenn das Kabeltelefon\neingesteckt und eingeschalten ist.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse SmartPhone ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren."),(0,r.kt)("li",{parentName:"ul"},"Die Methode readyForUse soll true zur\xfcckgeben, wenn die Energie des\nSmartphones die minimal erforderliche Energie \xfcberschreitet.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse ExamTask04 ")," ",(0,r.kt)("br",null),"\nErzeuge ein Kabeltelefon mit Akku und eines, dass an die Steckdose\nangeschlossen ist. Erzeuge ein leeres Smartphone und eines das halb voll ist.\nSpeichere alle erzeugten Fahrzeuge in einer ArrayList. Ermittle mithilfe einer\nSchleife die Anzahl der betriebsbereiten Telefone. Gib die Anzahl in der\nKonsole aus."),(0,r.kt)("h4",{id:"aufgabe-comparator"},"Aufgabe Comparator"),(0,r.kt)("img",{style:{height:"200px"},src:"/java-docs/img/comparator_task.png"}),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse CarVendor ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren."),(0,r.kt)("li",{parentName:"ul"},"Die Methode sortByConstructionYear soll die Autos absteigend nach Baujahr\nsortieren."),(0,r.kt)("li",{parentName:"ul"},"Die Methode print soll das Baujahr aller Autos in der Konsole ausgeben.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Hinweise zur Klasse ConstructionYearComparator ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Der ConstructionYearComparator soll das Comparator Interface implementieren\nund Autos absteigend nach Baujahr sortieren.")),(0,r.kt)("h2",{id:"klausurvorbereitung-java-ii"},"Klausurvorbereitung Java II"),(0,r.kt)("p",null,"tbd"))}m.isMDXComponent=!0}}]);