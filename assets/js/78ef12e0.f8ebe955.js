"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[6511],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=r.createContext({}),c=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(o.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=c(t),p=i,m=g["".concat(o,".").concat(p)]||g[p]||d[p]||a;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=p;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[g]="string"==typeof e?e:i,s[1]=l;for(var c=2;c<a;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8148:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={title:"Verzweigungen",description:"",sidebar_position:10,tags:["control-structures","cases"]},s=void 0,l={unversionedId:"documentation/control-structures/cases",id:"documentation/control-structures/cases",title:"Verzweigungen",description:"",source:"@site/docs/documentation/control-structures/cases.md",sourceDirName:"documentation/control-structures",slug:"/documentation/control-structures/cases",permalink:"/java-docs/documentation/control-structures/cases",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/documentation/control-structures/cases.md",tags:[{label:"control-structures",permalink:"/java-docs/tags/control-structures"},{label:"cases",permalink:"/java-docs/tags/cases"}],version:"current",sidebarPosition:10,frontMatter:{title:"Verzweigungen",description:"",sidebar_position:10,tags:["control-structures","cases"]},sidebar:"documentationSidebar",previous:{title:"Kontrollstrukturen",permalink:"/java-docs/documentation/control-structures/"},next:{title:"Schleifen",permalink:"/java-docs/documentation/control-structures/loops"}},o={},c=[{value:"Einfache Verzweigungen",id:"einfache-verzweigungen",level:2},{value:"Kaskadierte Verzweigungen",id:"kaskadierte-verzweigungen",level:2},{value:"Bedingte Zuweisungen",id:"bedingte-zuweisungen",level:2},{value:"Mehrfachverzweigungen",id:"mehrfachverzweigungen",level:2}],u={toc:c},g="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(g,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Mit Hilfe von Verzweigungen k\xf6nnen unterschiedliche Anweisungsbl\xf6cke ausgef\xfchrt werden."),(0,i.kt)("h2",{id:"einfache-verzweigungen"},"Einfache Verzweigungen"),(0,i.kt)("p",null,"Die if-Verzweigung ist eine Anweisung, die abh\xe4ngig von einer Bedingung zwischen unterschiedlichen Anweisungsbl\xf6cken ausw\xe4hlt: Ist die Bedingung wahr, wird der Anweisungsblock direkt nach der Bedingung ausgef\xfchrt, ansonsten wird der Anweisungsblock nach ",(0,i.kt)("inlineCode",{parentName:"p"},"else"),"\nausgef\xfchrt."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MainClass.java" showLineNumbers',title:'"MainClass.java"',showLineNumbers:!0},"public class MainClass {\n\n  public static void main(String[] args) {\n    int a = 3, b = 4, c;\n\n    if (a > b) {\n      c = a - b;\n    } else {\n      c = b - a;\n    }\n\n    System.out.println(c);\n  }\n\n}\n")),(0,i.kt)("admonition",{title:"Hinweis",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Der else-Zweig ist optional, kann also weggelassen werden.")),(0,i.kt)("h2",{id:"kaskadierte-verzweigungen"},"Kaskadierte Verzweigungen"),(0,i.kt)("p",null,"Mehrfachverzweigungen k\xf6nnen mit Hilfe einer if-else-if-Leiter abgebildet werden. Die if-else-if-Leiter verschachtelt mehrere if-Anweisungen zu einer sogenannten kaskadierten Verzweigung."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MainClass.java" showLineNumbers',title:'"MainClass.java"',showLineNumbers:!0},'public class MainClass {\n\n  public static void main(String[] args) {\n    int amount = 6;\n\n    if (amount >= 10) {\n      System.out.println("viel");\n    } else if (amount == 0) {\n      System.out.println("nichts");\n    } else if (amount > 0 && amount <= 5) {\n      System.out.println("wenig");\n    } else if (amount < 0) {\n      System.out.println("nicht definiert");\n    } else {\n      System.out.println("irgendwas zwischen wenig und viel");\n    }\n  }\n\n}\n')),(0,i.kt)("h2",{id:"bedingte-zuweisungen"},"Bedingte Zuweisungen"),(0,i.kt)("p",null,"Wird eine if-Verzweigung f\xfcr eine Wertzuweisung verwendet, spricht man von einer bedingten Zuweisung. Zus\xe4tzlich zur ausf\xfchrlichen Schreibweise existiert f\xfcr bedingte Zuweisungen auch eine Kurzschreibweise. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MainClass.java" showLineNumbers',title:'"MainClass.java"',showLineNumbers:!0},"public class MainClass {\n\n  public static void main(String[] args) {\n    int x = 1;\n    int y = 2;\n    int z;\n\n    /* ausf\xfchrliche Schreibweise */\n    if (x > y) {\n      z = 3;\n    } else {\n      z = 4;\n    }\n    System.out.println(z);\n\n    /* Kurzschreibweise */\n    z = (x > y) ? 3 : 4;\n    System.out.println(z);\n  }\n\n}\n")),(0,i.kt)("admonition",{title:"Hinweis",type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Die Kurzschreibweise sollte verantwortungsvoll verwendet werden, da die Lesbarkeit dadurch eventuell erschwert wird.")),(0,i.kt)("h2",{id:"mehrfachverzweigungen"},"Mehrfachverzweigungen"),(0,i.kt)("p",null,"Mehrfachverzweigungen k\xf6nnen entweder mit Hilfe von if-else-if-Leitern oder mit Hilfe der switch-case-Anweisung realisiert werden. Tritt ein Fall ein, werden alle Anweisungen bis zum n\xe4chsten ",(0,i.kt)("inlineCode",{parentName:"p"},"break")," ausgef\xfchrt. Durch Weglassen von ",(0,i.kt)("inlineCode",{parentName:"p"},"break")," k\xf6nnen\nunterschiedliche F\xe4lle gleich behandelt werden. Der default-Block wird immer dann ausgef\xfchrt, wenn keiner der aufgef\xfchrten F\xe4lle eintritt."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MainClass.java" showLineNumbers',title:'"MainClass.java"',showLineNumbers:!0},'public class MainClass {\n\n  public static void main(String[] args) {\n    String color = "r";\n    switch (color) {\n      case "r":\n      case "R":\n        System.out.println("rot");\n        break;\n      case "g":\n      case "G":\n        System.out.println("gr\xfcn");\n        break;\n      case "b":\n      case "B":\n        System.out.println("blau");\n        break;\n      default:\n        break;\n    }\n  }\n\n}\n')),(0,i.kt)("p",null,"Seit Java 14 beheben Switch-Ausdr\xfccke einige Ungereimtheiten der klassischen switch-case-Anweisung und erm\xf6glichen eine elegantere Syntax."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MainClass.java" showLineNumbers',title:'"MainClass.java"',showLineNumbers:!0},'public class MainClass {\n\n  public static void main(String[] args) {\n    String color = "r";\n\n    String colorText = switch (color) {\n      case "r", "R" -> "rot";\n      case "g", "G" -> "gr\xfcn";\n      case "b", "B" -> "blau";\n      default -> "";\n    };\n\n    System.out.println(colorText);\n  }\n\n}\n')))}d.isMDXComponent=!0}}]);