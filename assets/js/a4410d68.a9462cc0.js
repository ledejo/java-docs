"use strict";(self.webpackChunkjava_docs=self.webpackChunkjava_docs||[]).push([[6602],{3905:(e,n,a)=>{a.d(n,{Zo:()=>m,kt:()=>h});var r=a(7294);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var o=r.createContext({}),c=function(e){var n=r.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},m=function(e){var n=c(e.components);return r.createElement(o.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(a),p=t,h=u["".concat(o,".").concat(p)]||u[p]||d[p]||i;return a?r.createElement(h,l(l({ref:n},m),{},{components:a})):r.createElement(h,l({ref:n},m))}));function h(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=a.length,l=new Array(i);l[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[u]="string"==typeof e?e:t,l[1]=s;for(var c=2;c<i;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},2969:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=a(7462),t=(a(7294),a(3905));const i={title:"Geometrische Form",description:"",tags:["oo","inheritance","polymorphy","io-streams"]},l=void 0,s={unversionedId:"exam-exercises/exam-exercises-java1/shape",id:"exam-exercises/exam-exercises-java1/shape",title:"Geometrische Form",description:"",source:"@site/docs/exam-exercises/exam-exercises-java1/shape.md",sourceDirName:"exam-exercises/exam-exercises-java1",slug:"/exam-exercises/exam-exercises-java1/shape",permalink:"/java-docs/exam-exercises/exam-exercises-java1/shape",draft:!1,editUrl:"https://github.com/jappuccini/java-docs/tree/main/docs/exam-exercises/exam-exercises-java1/shape.md",tags:[{label:"oo",permalink:"/java-docs/tags/oo"},{label:"inheritance",permalink:"/java-docs/tags/inheritance"},{label:"polymorphy",permalink:"/java-docs/tags/polymorphy"},{label:"io-streams",permalink:"/java-docs/tags/io-streams"}],version:"current",frontMatter:{title:"Geometrische Form",description:"",tags:["oo","inheritance","polymorphy","io-streams"]},sidebar:"examExercisesSidebar",previous:{title:"Tiefgarage",permalink:"/java-docs/exam-exercises/exam-exercises-java1/parking-garage"},next:{title:"Kurs",permalink:"/java-docs/exam-exercises/exam-exercises-java1/student-course"}},o={},c=[{value:"Klassendiagramm",id:"klassendiagramm",level:2},{value:"Allgemeine Hinweise",id:"allgemeine-hinweise",level:2},{value:"Hinweise zur Klasse Shape",id:"hinweise-zur-klasse-shape",level:2},{value:"Hinweise zur Klasse Circle",id:"hinweise-zur-klasse-circle",level:2},{value:"Hinweise zur Klasse Rectangle",id:"hinweise-zur-klasse-rectangle",level:2},{value:"Hinweise zur Klasse ShapeReader",id:"hinweise-zur-klasse-shapereader",level:2},{value:"Beispielhafter Aufbau der Formendatei",id:"beispielhafter-aufbau-der-formendatei",level:2}],m={toc:c},u="wrapper";function d(e){let{components:n,...a}=e;return(0,t.kt)(u,(0,r.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Setze das abgebildete Klassendiagramm vollst\xe4ndig um. Erstelle zum Testen eine\nausf\xfchrbare Klasse."),(0,t.kt)("h2",{id:"klassendiagramm"},"Klassendiagramm"),(0,t.kt)("mermaid",{value:"classDiagram\n    ShapeReader o-- Shape\n    Shape <|-- Circle\n    Shape <|-- Rectangle\n    Rectangle <|-- Square\n\n    class ShapeReader {\n        -shapes List~Shape~\n        +ShapeReader(file File)\n        +getCircles() List~Circle~\n        +getShapesWithMinArea(minAreaInCM2 double) List~Shape~\n    }\n\n    class Shape {\n        +getAreaInCM2() double\n        +getCircumferenceInCM() double\n    }\n\n    class Circle {\n        -rInCM double\n        +Circle(rInCM double)\n        +getAreaInCM2() double\n        +getCircumferenceInCM() double\n    }\n\n    class Rectangle {\n        -aInCM double\n        -bInCM double\n        +Rectangle(aInCM double, bInCM double)\n        +getAreaInCM2() double\n        +getCircumferenceInCM() double\n    }\n\n    class Square {\n        +Square(aInCM double)\n    }"}),(0,t.kt)("h2",{id:"allgemeine-hinweise"},"Allgemeine Hinweise"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Aus Gr\xfcnden der \xdcbersicht werden im Klassendiagramm keine Getter und\nObject-Methoden dargestellt"),(0,t.kt)("li",{parentName:"ul"},"So nicht anders angegeben, sollen Konstruktoren, Setter, Getter sowie die\nObject-Methoden wie gewohnt implementiert werden"),(0,t.kt)("li",{parentName:"ul"},"Die statische Konstante ",(0,t.kt)("inlineCode",{parentName:"li"},"PI")," der Klasse ",(0,t.kt)("inlineCode",{parentName:"li"},"Math")," stellt die Kreiszahl Pi dar")),(0,t.kt)("h2",{id:"hinweise-zur-klasse-shape"},"Hinweise zur Klasse Shape"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"double getAreaInCM2()")," soll den Wert ",(0,t.kt)("em",{parentName:"li"},"0")," zur\xfcckgeben"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"double getCircumferenceInCM()")," soll den Wert ",(0,t.kt)("em",{parentName:"li"},"0")," zur\xfcckgeben")),(0,t.kt)("h2",{id:"hinweise-zur-klasse-circle"},"Hinweise zur Klasse Circle"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"double getAreaInCM2()")," soll den Fl\xe4cheninhalt gem\xe4\xdf der Formel\n",(0,t.kt)("em",{parentName:"li"},"Pi ",(0,t.kt)("em",{parentName:"em"}," r ")," r")," berechnen und zur\xfcckgeben"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"double getCircumferenceInCM()")," soll den Umfang gem\xe4\xdf der Formel\n",(0,t.kt)("em",{parentName:"li"},"2 ",(0,t.kt)("em",{parentName:"em"}," Pi ")," r")," berechnen und zur\xfcckgeben")),(0,t.kt)("h2",{id:"hinweise-zur-klasse-rectangle"},"Hinweise zur Klasse Rectangle"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"double getAreaInCM2()")," soll den Fl\xe4cheninhalt gem\xe4\xdf der Formel\n",(0,t.kt)("em",{parentName:"li"},"a ","*"," b")," berechnen und zur\xfcckgeben"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"double getCircumferenceInCM()")," soll den Umfang gem\xe4\xdf der Formel\n",(0,t.kt)("em",{parentName:"li"},"2 ",(0,t.kt)("em",{parentName:"em"}," a + 2 ")," b")," berechnen und zur\xfcckgeben")),(0,t.kt)("h2",{id:"hinweise-zur-klasse-shapereader"},"Hinweise zur Klasse ShapeReader"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Der Konstruktor soll der Formenliste (",(0,t.kt)("inlineCode",{parentName:"li"},"shapes"),") alle Formen der eingehenden\nDatei hinzuf\xfcgen"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"List<Circle> getCircles()")," soll alle Kreise der Formenliste\n(",(0,t.kt)("inlineCode",{parentName:"li"},"shapes"),") zur\xfcckgeben"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"List<Shape> getShapesWithMinArea(minAreaInCM2: double)")," soll alle\nFormen der Formenliste (",(0,t.kt)("inlineCode",{parentName:"li"},"shapes"),") zur\xfcckgeben, die mindestens den eingehenden\nFl\xe4cheninhalt aufweisen")),(0,t.kt)("h2",{id:"beispielhafter-aufbau-der-formendatei"},"Beispielhafter Aufbau der Formendatei"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"Circle;4\nSquare;5\nRectangle;3;4\nRectangle;1;7\nCircle;2\nCircle;3\n")))}d.isMDXComponent=!0}}]);